<?xml version="1.0" encoding="UTF-8"?>

<!-- Generated by maven-plugin-tools 3.3 on 2017-12-12 -->

<plugin>
  <name>Android Maven Plugin - android-maven-plugin</name>
  <description>Maven Plugin for Android Development</description>
  <groupId>com.simpligility.maven.plugins</groupId>
  <artifactId>android-maven-plugin</artifactId>
  <version>4.5.0-jarfix</version>
  <goalPrefix>android</goalPrefix>
  <isolatedRealm>false</isolatedRealm>
  <inheritedByDefault>true</inheritedByDefault>
  <mojos>
    <mojo>
      <goal>aar</goal>
      <description>Creates an Android Archive (aar) file.&lt;br&gt;</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>verify</phase>
      <implementation>com.simpligility.maven.plugins.android.phase09package.AarMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>applicationMakefile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the application makefile to use for the build (if other than the default Application.mk).</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>classesJarExcludes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the files that should be excluded from the classes.jar within the aar</description>
        </parameter>
        <parameter>
          <name>classesJarIncludes</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the files that should be included in the classes.jar within the aar</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Classifier to add to the artifact generated. If given, the artifact will be an attachment instead.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>consumerProguardFiles</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the proguard rule files to be included in the final package. All specified files will be merged into
one proguard.txt file.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkArchitecture</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the architecture for the NDK build</description>
        </parameter>
        <parameter>
          <name>ndkClassifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the classifier with which the artifact should be stored in the repository</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>obfuscatedJar</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkArchitecture implementation="java.lang.String">${android.ndk.build.architecture}</ndkArchitecture>
        <ndkClassifier implementation="java.lang.String">${android.ndk.build.native-classifier}</ndkClassifier>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <obfuscatedJar implementation="java.lang.String" default-value="${project.build.directory}/${project.build.finalName}_obfuscated.jar">${android.proguard.obfuscatedJar}</obfuscatedJar>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>apk</goal>
      <description>Creates the apk file. By default signs it with debug keystore.&lt;br&gt;
Change that by setting configuration parameter
&lt;code&gt;&amp;lt;sign&amp;gt;&amp;lt;debug&amp;gt;false&amp;lt;/debug&amp;gt;&amp;lt;/sign&amp;gt;&lt;/code&gt;.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>com.simpligility.maven.plugins.android.phase09package.ApkMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>apk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Apk</type>
          <required>false</required>
          <editable>true</editable>
          <description>Embedded configuration of this mojo.</description>
        </parameter>
        <parameter>
          <name>apkDebug</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Defines whether or not the APK is being produced in debug mode or not.</description>
        </parameter>
        <parameter>
          <name>apkNativeToolchain</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>artifactSet</name>
          <type>com.simpligility.maven.plugins.android.IncludeExcludeSet</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to include or exclude artifacts by {@code groupId}, {@code artifactId}, and {@code versionId}. The
{@code include} parameter has higher priority than the {@code exclude} parameter. These two parameters can
override the {@code artifactTypeSet} and {@code skipDependencies} parameters. Artifact {@code groupId},
{@code artifactId}, and {@code versionId} are specified by a string with the respective values separated using
a colon character {@code :}. {@code artifactId} and {@code versionId} can be optional covering an artifact
range. Empty strings are ignored. Example:
&lt;pre&gt;
    &amp;lt;artifactTypeSet&amp;gt;
        &amp;lt;includes&amp;gt;
            &amp;lt;include&amp;gt;foo-group:foo-artifact:1.0-SNAPSHOT&amp;lt;/include&amp;gt;
            &amp;lt;include&amp;gt;bar-group:bar-artifact:1.0-SNAPSHOT&amp;lt;/include&amp;gt;
            &amp;lt;include&amp;gt;baz-group:*&amp;lt;/include&amp;gt;
        &amp;lt;includes&amp;gt;
        &amp;lt;excludes&amp;gt;
            &amp;lt;exclude&amp;gt;qux-group:qux-artifact:*&amp;lt;/exclude&amp;gt;
        &amp;lt;excludes&amp;gt;
    &amp;lt;/artifactTypeSet&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>artifactTypeSet</name>
          <type>com.simpligility.maven.plugins.android.IncludeExcludeSet</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to include or exclude artifacts by type. The {@code include} parameter has higher priority than the
{@code exclude} parameter. These two parameters can be overridden by the {@code artifactSet} parameter. Empty
strings are ignored. Example:
&lt;pre&gt;
    &amp;lt;artifactTypeSet&amp;gt;
        &amp;lt;includes&amp;gt;
            &amp;lt;include&amp;gt;aar&amp;lt;/include&amp;gt;
        &amp;lt;includes&amp;gt;
        &amp;lt;excludes&amp;gt;
            &amp;lt;exclude&amp;gt;jar&amp;lt;/exclude&amp;gt;
        &amp;lt;excludes&amp;gt;
    &amp;lt;/artifactTypeSet&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Classifier to add to the artifact generated. If given, the artifact will be an attachment instead.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>excludeJarResources</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specify a list of patterns that are matched against the names of jar file
dependencies. Matching jar files will not have their resources added to the
resulting APK.

The patterns are standard Java regexes.</description>
        </parameter>
        <parameter>
          <name>extractDuplicates</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Allows to detect and extract the duplicate files from embedded jars. In that case, the plugin analyzes
the content of all embedded dependencies and checks they are no duplicates inside those dependencies. Indeed,
Android does not support duplicates, and all dependencies are inlined in the APK. If duplicates files are found,
the resource is kept in the first dependency and removes from others.</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDependenciesHardwareArchitectureDefault</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Default hardware architecture for native library dependencies (with {@code &amp;lt;type&gt;so&amp;lt;/type&gt;})
without a classifier.&lt;/p&gt;
&lt;p&gt;Valid values currently include {@code armeabi}, {@code armeabi-v7a}, {@code mips} and {@code x86}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkFinalLibraryName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the final name of the library output by the build (this allows</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>outputApk</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The apk file produced by the apk goal. Per default the file is placed into the build directory (target
normally) using the build final name and apk as extension.</description>
        </parameter>
        <parameter>
          <name>pluginMetaInf</name>
          <alias>metaInf</alias>
          <type>com.simpligility.maven.plugins.android.configuration.MetaInf</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameInstrumentationTargetPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Rewrite the manifest so that all of its instrumentation components target the given package.
This value will be passed on to the aapt parameter --rename-instrumentation-target-package.
Look to aapt for more help on this. &lt;/p&gt;

TODO pass this into AaptExecutor</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sign</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sign</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;How to sign the apk.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sign&amp;gt;
    &amp;lt;debug&amp;gt;auto&amp;lt;/debug&amp;gt;
&amp;lt;/sign&amp;gt;
&lt;/pre&gt;
&lt;p&gt;Valid values for &lt;code&gt;&amp;lt;debug&amp;gt;&lt;/code&gt; are:
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;true&lt;/code&gt; = sign with the debug keystore.
&lt;li&gt;&lt;code&gt;false&lt;/code&gt; = don&apos;t sign with the debug keystore.
&lt;li&gt;&lt;code&gt;both&lt;/code&gt; = create a signed as well as an unsigned apk.
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt; (default) = sign with debug keystore, unless another keystore is defined. (Signing with
other keystores is not yet implemented. See
&lt;a href=&quot;http://code.google.com/p/maven-android-plugin/issues/detail?id=2&quot;&gt;Issue 2&lt;/a&gt;.)
&lt;/ul&gt;&lt;/p&gt;
&lt;p&gt;Can also be configured from command-line with parameter &lt;code&gt;-Dandroid.sign.debug&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>signDebug</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sign.debug&lt;/code&gt; in case there is no pom with a
&lt;code&gt;&amp;lt;sign&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sign#debug}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>skipDependencies</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skips transitive dependencies. May be useful if the target classes directory is populated with the
{@code maven-dependency-plugin} and already contains all dependency classes.</description>
        </parameter>
        <parameter>
          <name>sourceDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Additional source directories that contain resources to be packaged into the apk.&lt;/p&gt;
&lt;p&gt;These are not source directories, that contain java classes to be compiled.
It corresponds to the -df option of the apkbuilder program. It allows you to specify directories,
that contain additional resources to be packaged into the apk. &lt;/p&gt;
So an example inside the plugin configuration could be:
&lt;pre&gt;
&amp;lt;configuration&amp;gt;
  ...
   &amp;lt;sourceDirectories&amp;gt;
     &amp;lt;sourceDirectory&amp;gt;${project.basedir}/additionals&amp;lt;/sourceDirectory&amp;gt;
  &amp;lt;/sourceDirectories&amp;gt;
  ...
&amp;lt;/configuration&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>transformers</name>
          <type>org.apache.maven.plugins.shade.resource.ResourceTransformer[]</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <apkDebug implementation="java.lang.Boolean">${android.apk.debug}</apkDebug>
        <apkNativeToolchain implementation="java.lang.String">${android.nativeToolchain}</apkNativeToolchain>
        <artifactSet implementation="com.simpligility.maven.plugins.android.IncludeExcludeSet">${artifactSet}</artifactSet>
        <artifactTypeSet implementation="com.simpligility.maven.plugins.android.IncludeExcludeSet">${artifactTypeSet}</artifactTypeSet>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractDuplicates implementation="boolean" default-value="false">${android.extractDuplicates}</extractDuplicates>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDependenciesHardwareArchitectureDefault implementation="java.lang.String" default-value="armeabi">${android.nativeLibrariesDependenciesHardwareArchitectureDefault}</nativeLibrariesDependenciesHardwareArchitectureDefault>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkFinalLibraryName implementation="java.lang.String">${android.ndk.build.build.final-library.name}</ndkFinalLibraryName>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <outputApk implementation="java.lang.String" default-value="${project.build.directory}/${project.build.finalName}.apk">${android.outputApk}</outputApk>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameInstrumentationTargetPackage implementation="java.lang.String">${android.renameInstrumentationTargetPackage}</renameInstrumentationTargetPackage>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <signDebug implementation="java.lang.String" default-value="auto">${android.sign.debug}</signDebug>
        <skipDependencies implementation="boolean" default-value="false">${skipDependencies}</skipDependencies>
        <sourceDirectories implementation="java.io.File[]">${android.sourceDirectories}</sourceDirectories>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>apklib</goal>
      <description>Creates the apklib file.&lt;br&gt;
apklib files do not generate deployable artifacts.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>package</phase>
      <implementation>com.simpligility.maven.plugins.android.phase09package.ApklibMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <deprecated>Use Aar instead see {@link com.simpligility.maven.plugins.android.phase09package.AarMojo}</deprecated>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>applicationMakefile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the application makefile to use for the build (if other than the default Application.mk).</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>classifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Classifier to add to the artifact generated. If given, the artifact will be an attachment instead.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkArchitecture</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Defines the architecture for the NDK build</description>
        </parameter>
        <parameter>
          <name>ndkClassifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies the classifier with which the artifact should be stored in the repository</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkArchitecture implementation="java.lang.String">${android.ndk.build.architecture}</ndkArchitecture>
        <ndkClassifier implementation="java.lang.String">${android.ndk.build.native-classifier}</ndkClassifier>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>connect</goal>
      <description>Connect external IP addresses to the ADB server.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.ConnectMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>deploy</goal>
      <description>Deploys the apk(s) of the current project(s) to all attached devices and emulators.
Automatically skips other projects in a multi-module build that do not use packaging
apk without terminating.&lt;br&gt;

Deploymnet is automatically performed when running &lt;code&gt;mvn integration-test&lt;/code&gt;
(or &lt;code&gt;mvn install&lt;/code&gt;) on a project with instrumentation tests.</description>
      <requiresDependencyResolution>runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>pre-integration-test</phase>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.DeployMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>deploy-apk</goal>
      <description>Deploys a specified Android application apk to attached devices and emulators. 
By default it will deploy to all, but a subset or single one can be configured 
with the device and devices parameters.This goal can be used in non-android 
projects and as standalone execution on the command line. &lt;br&gt;</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.DeployApkMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>deployapk</name>
          <type>com.simpligility.maven.plugins.android.configuration.DeployApk</type>
          <required>false</required>
          <editable>true</editable>
          <description>Configuration for apk file deployment within a pom file. See {@link #deployapkFilename}. 

&lt;pre&gt;
&amp;lt;deployapk&amp;gt;
   &amp;lt;filename&amp;gt;yourapk.apke&amp;lt;/filename&amp;gt;
&amp;lt;/deployapk&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>deployapkFilename</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <deployapkFilename implementation="java.io.File">${android.deployapk.filename}</deployapkFilename>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>deploy-dependencies</goal>
      <description>Deploys all directly declared dependencies of &lt;code&gt;&amp;lt;type&amp;gt;apk&amp;lt;/type&amp;gt;&lt;/code&gt; in this project&apos;s pom.&lt;br&gt;
Usually used in a project with instrumentation tests, to deploy the apk to test onto the device before running the
deploying and running the instrumentation tests apk.&lt;br&gt;
Automatically performed when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) on a project
with instrumentation tests.</description>
      <requiresDependencyResolution>runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.DeployDependenciesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>devices</goal>
      <description>DevicesMojo lists all attached devices and emulators found with the android debug bridge. It uses the same
naming convention for the emulator as used in other places in the Android Maven Plugin and adds the status
of the device in the list.

TODO The goal is very simple and could be enhanced for better display, a verbose option to display and to take the
android.device paramter into account.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.DevicesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>dex</goal>
      <description>Converts compiled Java classes to the Android dex format.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>prepare-package</phase>
      <implementation>com.simpligility.maven.plugins.android.phase08preparepackage.DexMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>artifactSet</name>
          <type>com.simpligility.maven.plugins.android.IncludeExcludeSet</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to include or exclude artifacts by {@code groupId}, {@code artifactId}, and {@code versionId}. The
{@code include} parameter has higher priority than the {@code exclude} parameter. These two parameters can
override the {@code artifactTypeSet} and {@code skipDependencies} parameters. Artifact {@code groupId},
{@code artifactId}, and {@code versionId} are specified by a string with the respective values separated using
a colon character {@code :}. {@code artifactId} and {@code versionId} can be optional covering an artifact
range. Empty strings are ignored. Example:
&lt;pre&gt;
    &amp;lt;artifactTypeSet&amp;gt;
        &amp;lt;includes&amp;gt;
            &amp;lt;include&amp;gt;foo-group:foo-artifact:1.0-SNAPSHOT&amp;lt;/include&amp;gt;
            &amp;lt;include&amp;gt;bar-group:bar-artifact:1.0-SNAPSHOT&amp;lt;/include&amp;gt;
            &amp;lt;include&amp;gt;baz-group:*&amp;lt;/include&amp;gt;
        &amp;lt;includes&amp;gt;
        &amp;lt;excludes&amp;gt;
            &amp;lt;exclude&amp;gt;qux-group:qux-artifact:*&amp;lt;/exclude&amp;gt;
        &amp;lt;excludes&amp;gt;
    &amp;lt;/artifactTypeSet&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>artifactTypeSet</name>
          <type>com.simpligility.maven.plugins.android.IncludeExcludeSet</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to include or exclude artifacts by type. The {@code include} parameter has higher priority than the
{@code exclude} parameter. These two parameters can be overridden by the {@code artifactSet} parameter. Empty
strings are ignored. Example:
&lt;pre&gt;
    &amp;lt;artifactTypeSet&amp;gt;
        &amp;lt;includes&amp;gt;
            &amp;lt;include&amp;gt;aar&amp;lt;/include&amp;gt;
        &amp;lt;includes&amp;gt;
        &amp;lt;excludes&amp;gt;
            &amp;lt;exclude&amp;gt;jar&amp;lt;/exclude&amp;gt;
        &amp;lt;excludes&amp;gt;
    &amp;lt;/artifactTypeSet&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>dex</name>
          <type>com.simpligility.maven.plugins.android.configuration.Dex</type>
          <required>false</required>
          <editable>true</editable>
          <description>Configuration for the dex command execution. It can be configured in the plugin configuration like so

&lt;pre&gt;
&amp;lt;dex&amp;gt;
  &amp;lt;jvmArguments&amp;gt;
    &amp;lt;jvmArgument&amp;gt;-Xms256m&amp;lt;/jvmArgument&amp;gt;
    &amp;lt;jvmArgument&amp;gt;-Xmx512m&amp;lt;/jvmArgument&amp;gt;
  &amp;lt;/jvmArguments&amp;gt;
  &amp;lt;coreLibrary&amp;gt;true|false&amp;lt;/coreLibrary&amp;gt;
  &amp;lt;noLocals&amp;gt;true|false&amp;lt;/noLocals&amp;gt;
  &amp;lt;forceJumbo&amp;gt;true|false&amp;lt;/forceJumbo&amp;gt;
  &amp;lt;optimize&amp;gt;true|false&amp;lt;/optimize&amp;gt;
  &amp;lt;preDex&amp;gt;true|false&amp;lt;/preDex&amp;gt;
  &amp;lt;preDexLibLocation&amp;gt;path to predexed libraries, defaults to target/dexedLibs&amp;lt;/preDexLibLocation&amp;gt;
  &amp;lt;incremental&amp;gt;true|false&amp;lt;/incremental&amp;gt;
  &amp;lt;multiDex&amp;gt;true|false&amp;lt;/multiDex&amp;gt;
  &amp;lt;generateMainDexList&amp;gt;true|false&amp;lt;/generateMainDexList&amp;gt;
  &amp;lt;mainDexList&amp;gt;path to class list file&amp;lt;/mainDexList&amp;gt;
  &amp;lt;minimalMainDex&amp;gt;true|false&amp;lt;/minimalMainDex&amp;gt;
&amp;lt;/dex&amp;gt;
&lt;/pre&gt;

or via properties dex.* or command line parameters android.dex.*</description>
        </parameter>
        <parameter>
          <name>dexArguments</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Additional command line parameters passed to dx.</description>
        </parameter>
        <parameter>
          <name>dexCoreLibrary</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to pass the --core-library flag to dx.</description>
        </parameter>
        <parameter>
          <name>dexForceJumbo</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to use force jumbo mode.</description>
        </parameter>
        <parameter>
          <name>dexGenerateMainDexList</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to generate main dex list.
Supported from build tools version 22.0.0+

Note: if set to true, dexMinimalMainDex is set to true, and dexMainDexList
is set to generated main dex list.</description>
        </parameter>
        <parameter>
          <name>dexIncremental</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to pass the --incremental flag to dx.</description>
        </parameter>
        <parameter>
          <name>dexJvmArguments</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Extra JVM Arguments. Using these you can e.g. increase memory for the jvm running the build.</description>
        </parameter>
        <parameter>
          <name>dexMainDexList</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Full path to class list to multi dex</description>
        </parameter>
        <parameter>
          <name>dexMinimalMainDex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to pass the --minimal-main-dex flag to dx.</description>
        </parameter>
        <parameter>
          <name>dexMultiDex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to pass the --multi-dex flag to dx.</description>
        </parameter>
        <parameter>
          <name>dexNoLocals</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to pass the --no-locals flag to dx.</description>
        </parameter>
        <parameter>
          <name>dexOptimize</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to pass the --no-optimize flag to dx.</description>
        </parameter>
        <parameter>
          <name>dexPreDex</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to predex the jars.</description>
        </parameter>
        <parameter>
          <name>dexPreDexLibLocation</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to predexed libraries.</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>obfuscatedJar</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the obfuscated JAR.</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>skipDependencies</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skips transitive dependencies. May be useful if the target classes directory is populated with the
{@code maven-dependency-plugin} and already contains all dependency classes.</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <artifactSet implementation="com.simpligility.maven.plugins.android.IncludeExcludeSet">${artifactSet}</artifactSet>
        <artifactTypeSet implementation="com.simpligility.maven.plugins.android.IncludeExcludeSet">${artifactTypeSet}</artifactTypeSet>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <dexArguments implementation="java.lang.String">${android.dex.dexarguments}</dexArguments>
        <dexCoreLibrary implementation="boolean" default-value="false">${android.dex.coreLibrary}</dexCoreLibrary>
        <dexForceJumbo implementation="boolean" default-value="false">${android.dex.forcejumbo}</dexForceJumbo>
        <dexGenerateMainDexList implementation="boolean" default-value="false">${android.dex.generatemaindexlist}</dexGenerateMainDexList>
        <dexIncremental implementation="boolean" default-value="false">${android.dex.incremental}</dexIncremental>
        <dexJvmArguments implementation="java.lang.String[]" default-value="-Xmx1024M">${android.dex.jvmArguments}</dexJvmArguments>
        <dexMainDexList implementation="java.lang.String">${android.dex.maindexlist}</dexMainDexList>
        <dexMinimalMainDex implementation="boolean" default-value="false">${android.dex.minimalmaindex}</dexMinimalMainDex>
        <dexMultiDex implementation="boolean" default-value="false">${android.dex.multidex}</dexMultiDex>
        <dexNoLocals implementation="boolean" default-value="false">${android.dex.noLocals}</dexNoLocals>
        <dexOptimize implementation="boolean" default-value="true">${android.dex.optimize}</dexOptimize>
        <dexPreDex implementation="boolean" default-value="false">${android.dex.predex}</dexPreDex>
        <dexPreDexLibLocation implementation="java.lang.String" default-value="${project.build.directory}${file.separator}dexedLibs">${android.dex.dexPreDexLibLocation}</dexPreDexLibLocation>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <obfuscatedJar implementation="java.io.File">${android.proguard.obfuscatedJar}</obfuscatedJar>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <skipDependencies implementation="boolean" default-value="false">${skipDependencies}</skipDependencies>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>disconnect</goal>
      <description>Disconnect external IP addresses from the ADB server.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.DisconnectMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>emma</goal>
      <description>After compiled Java classes use emma tool</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>process-classes</phase>
      <implementation>com.simpligility.maven.plugins.android.phase04processclasses.EmmaMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>emma</name>
          <type>com.simpligility.maven.plugins.android.configuration.Emma</type>
          <required>false</required>
          <editable>true</editable>
          <description>Configuration for the emma command execution. It can be configured in the plugin configuration like so


&lt;pre&gt;
&amp;lt;emma&amp;gt;
  &amp;lt;enable&amp;gt;true|false&amp;lt;/enable&amp;gt;
  &amp;lt;classFolders&amp;gt;${project}/target/classes&amp;lt;/classFolders&amp;gt;
  &amp;lt;outputMetaFile&amp;gt;${project}/target/emma/coverage.em&amp;lt;/outputMetaFile&amp;gt;
  &amp;lt;filters&amp;gt;${project}emma filter&amp;lt;/filters&amp;gt;
&amp;lt;/emma&amp;gt;
&lt;/pre&gt;

or via properties emma.* or command line parameters android.emma.*</description>
        </parameter>
        <parameter>
          <name>emmaClassFolders</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Configure directory where compiled classes are.</description>
        </parameter>
        <parameter>
          <name>emmaEnable</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to enable or not enable emma.</description>
        </parameter>
        <parameter>
          <name>emmaFilters</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Emma filter. Refer to the &lt;a href=&quot;http://emma.sourceforge.net/reference/ch02s06s02.html&quot;&gt;emma syntax for
filters&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>emmaOutputMetaFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path of the emma meta data file (.em).</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <emmaClassFolders implementation="java.lang.String" default-value="${project.build.directory}/classes/">${android.emma.classFolders}</emmaClassFolders>
        <emmaEnable implementation="boolean" default-value="false">${android.emma.enable}</emmaEnable>
        <emmaFilters implementation="java.lang.String">${android.emma.filters}</emmaFilters>
        <emmaOutputMetaFile implementation="java.io.File" default-value="${project.build.directory}/emma/coverage.em">${android.emma.outputMetaFile}</emmaOutputMetaFile>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>emulator-start</goal>
      <description>EmulatorStartMojo can start the Android Emulator with a specified Android Virtual Device (avd).</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.EmulatorStartMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>emulator</name>
          <type>com.simpligility.maven.plugins.android.configuration.Emulator</type>
          <required>false</required>
          <editable>true</editable>
          <description>Configuration for the emulator goals. Either use the plugin configuration like this
&lt;pre&gt;
&amp;lt;emulator&amp;gt;
  &amp;lt;avd&amp;gt;Default&amp;lt;/avd&amp;gt;
  &amp;lt;wait&amp;gt;20000&amp;lt;/wait&amp;gt;
  &amp;lt;options&amp;gt;-no-skin&amp;lt;/options&amp;gt;
  &amp;lt;executable&amp;gt;emulator-arm&amp;lt;/executable&amp;gt;
&amp;lt;/emulator&amp;gt;
&lt;/pre&gt;
or configure as properties  on the command line as android.emulator.avd, android.emulator.wait,
android.emulator.options and android.emulator.executable or in pom or settings file as emulator.avd,
emulator.wait and emulator.options.</description>
        </parameter>
        <parameter>
          <name>emulatorAvd</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the Android Virtual Device (emulatorAvd) that will be started by the emulator. Default value is &quot;Default&quot;</description>
        </parameter>
        <parameter>
          <name>emulatorExecutable</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default emulator executable. Default uses just &quot;emulator&quot;.</description>
        </parameter>
        <parameter>
          <name>emulatorOptions</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Additional command line options for the emulator start up. This option can be used to pass any additional
options desired to the invocation of the emulator. Use emulator -help for more details. An example would be
&quot;-no-skin&quot;.</description>
        </parameter>
        <parameter>
          <name>emulatorUnlock</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unlock the emulator after it is started.</description>
        </parameter>
        <parameter>
          <name>emulatorWait</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Wait time for the emulator start up.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <emulatorAvd implementation="java.lang.String">${android.emulator.avd}</emulatorAvd>
        <emulatorExecutable implementation="java.lang.String">${android.emulator.executable}</emulatorExecutable>
        <emulatorOptions implementation="java.lang.String">${android.emulator.options}</emulatorOptions>
        <emulatorUnlock implementation="boolean" default-value="false">${android.emulatorUnlock}</emulatorUnlock>
        <emulatorWait implementation="java.lang.String">${android.emulator.wait}</emulatorWait>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>emulator-stop</goal>
      <description>EmulatorStartMojo can stop the Android Emulator with a specified Android Virtual Device (avd).</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.EmulatorStopMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>emulator</name>
          <type>com.simpligility.maven.plugins.android.configuration.Emulator</type>
          <required>false</required>
          <editable>true</editable>
          <description>Configuration for the emulator goals. Either use the plugin configuration like this
&lt;pre&gt;
&amp;lt;emulator&amp;gt;
  &amp;lt;avd&amp;gt;Default&amp;lt;/avd&amp;gt;
  &amp;lt;wait&amp;gt;20000&amp;lt;/wait&amp;gt;
  &amp;lt;options&amp;gt;-no-skin&amp;lt;/options&amp;gt;
  &amp;lt;executable&amp;gt;emulator-arm&amp;lt;/executable&amp;gt;
&amp;lt;/emulator&amp;gt;
&lt;/pre&gt;
or configure as properties  on the command line as android.emulator.avd, android.emulator.wait,
android.emulator.options and android.emulator.executable or in pom or settings file as emulator.avd,
emulator.wait and emulator.options.</description>
        </parameter>
        <parameter>
          <name>emulatorAvd</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the Android Virtual Device (emulatorAvd) that will be started by the emulator. Default value is &quot;Default&quot;</description>
        </parameter>
        <parameter>
          <name>emulatorExecutable</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default emulator executable. Default uses just &quot;emulator&quot;.</description>
        </parameter>
        <parameter>
          <name>emulatorOptions</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Additional command line options for the emulator start up. This option can be used to pass any additional
options desired to the invocation of the emulator. Use emulator -help for more details. An example would be
&quot;-no-skin&quot;.</description>
        </parameter>
        <parameter>
          <name>emulatorUnlock</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unlock the emulator after it is started.</description>
        </parameter>
        <parameter>
          <name>emulatorWait</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Wait time for the emulator start up.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <emulatorAvd implementation="java.lang.String">${android.emulator.avd}</emulatorAvd>
        <emulatorExecutable implementation="java.lang.String">${android.emulator.executable}</emulatorExecutable>
        <emulatorOptions implementation="java.lang.String">${android.emulator.options}</emulatorOptions>
        <emulatorUnlock implementation="boolean" default-value="false">${android.emulatorUnlock}</emulatorUnlock>
        <emulatorWait implementation="java.lang.String">${android.emulator.wait}</emulatorWait>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>emulator-stop-all</goal>
      <description>EmulatorStopeAllMojo will stop all attached devices.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.EmulatorStopAllMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>emulator</name>
          <type>com.simpligility.maven.plugins.android.configuration.Emulator</type>
          <required>false</required>
          <editable>true</editable>
          <description>Configuration for the emulator goals. Either use the plugin configuration like this
&lt;pre&gt;
&amp;lt;emulator&amp;gt;
  &amp;lt;avd&amp;gt;Default&amp;lt;/avd&amp;gt;
  &amp;lt;wait&amp;gt;20000&amp;lt;/wait&amp;gt;
  &amp;lt;options&amp;gt;-no-skin&amp;lt;/options&amp;gt;
  &amp;lt;executable&amp;gt;emulator-arm&amp;lt;/executable&amp;gt;
&amp;lt;/emulator&amp;gt;
&lt;/pre&gt;
or configure as properties  on the command line as android.emulator.avd, android.emulator.wait,
android.emulator.options and android.emulator.executable or in pom or settings file as emulator.avd,
emulator.wait and emulator.options.</description>
        </parameter>
        <parameter>
          <name>emulatorAvd</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Name of the Android Virtual Device (emulatorAvd) that will be started by the emulator. Default value is &quot;Default&quot;</description>
        </parameter>
        <parameter>
          <name>emulatorExecutable</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default emulator executable. Default uses just &quot;emulator&quot;.</description>
        </parameter>
        <parameter>
          <name>emulatorOptions</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Additional command line options for the emulator start up. This option can be used to pass any additional
options desired to the invocation of the emulator. Use emulator -help for more details. An example would be
&quot;-no-skin&quot;.</description>
        </parameter>
        <parameter>
          <name>emulatorUnlock</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Unlock the emulator after it is started.</description>
        </parameter>
        <parameter>
          <name>emulatorWait</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Wait time for the emulator start up.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <emulatorAvd implementation="java.lang.String">${android.emulator.avd}</emulatorAvd>
        <emulatorExecutable implementation="java.lang.String">${android.emulator.executable}</emulatorExecutable>
        <emulatorOptions implementation="java.lang.String">${android.emulator.options}</emulatorOptions>
        <emulatorUnlock implementation="boolean" default-value="false">${android.emulatorUnlock}</emulatorUnlock>
        <emulatorWait implementation="java.lang.String">${android.emulator.wait}</emulatorWait>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>generate-sources</goal>
      <description>Generates &lt;code&gt;R.java&lt;/code&gt; based on resources specified by the &lt;code&gt;resources&lt;/code&gt; configuration parameter.
Generates java files based on aidl files.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>generate-sources</phase>
      <implementation>com.simpligility.maven.plugins.android.phase01generatesources.GenerateSourcesMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>aidlSourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The directory containing the aidl files.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>androidManifestFilePre4</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Pre AMP-4 AndroidManifest file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>assetsDirectoryPre4</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Pre AMP-4 android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>buildConfigConstants</name>
          <type>com.simpligility.maven.plugins.android.configuration.BuildConfigConstant[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Parameter designed to generate custom BuildConfig constants</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>failOnConflictingLayouts</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to fail the build if one of the dependencies and/or the project duplicate a layout file.
&lt;p&gt;
Such a scenario generally means that the build will fail with a compilation error due to missing resource files.
This is because any Ids contained in the duplicate layout files can never be generated by aapt, as appt
only picks up the first resource file it finds in its path.</description>
        </parameter>
        <parameter>
          <name>failOnDuplicatePackages</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to fail the build if one of the dependencies and/or the project have similar package in the
AndroidManifest.
&lt;p&gt;
Such scenario generally means that the build will fail with a compilation error due to
missing resources in the R file generated.</description>
        </parameter>
        <parameter>
          <name>failOnNonStandardStructure</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If any non-standard files/folders exist and have NOT been explicitly configured then fail the build.</description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>genDirectoryAidl</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing aidl classes</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectoryPre4</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Pre AMP-4 native libraries folder.</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceDirectoryPre4</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Pre AMP-4 android resources folder.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>warnOnApklibDependencies</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to produce a warning if there is an aar dependency that has an apklib artifact in its dependency
tree. The combination of aar library including or depending on an apklib has been deprecated and may not be
supported by future plugin versions. Traversing the dependency graph is done for all project dependencies
present in build classpath.&lt;/p&gt;

&lt;p&gt;It is recommended to keep this set to &lt;code&gt;true&lt;/code&gt; to catch possible issues as soon as possible.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <aidlSourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/aidl">${android.aidlSourceDirectory}</aidlSourceDirectory>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <androidManifestFilePre4 implementation="java.io.File" default-value="${project.basedir}/AndroidManifest.xml"/>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <assetsDirectoryPre4 implementation="java.io.File" default-value="${project.basedir}/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <buildConfigConstants implementation="com.simpligility.maven.plugins.android.configuration.BuildConfigConstant[]">${android.buildConfigConstants}</buildConfigConstants>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <failOnConflictingLayouts implementation="boolean" default-value="true"/>
        <failOnDuplicatePackages implementation="boolean" default-value="true"/>
        <failOnNonStandardStructure implementation="boolean" default-value="true"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <genDirectoryAidl implementation="java.io.File" default-value="${project.build.directory}/generated-sources/aidl">${android.genDirectoryAidl}</genDirectoryAidl>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <nativeLibrariesDirectoryPre4 implementation="java.io.File" default-value="${project.basedir}/libs"/>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceDirectoryPre4 implementation="java.io.File" default-value="${project.basedir}/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <warnOnApklibDependencies implementation="boolean" default-value="true"/>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.repository.RepositorySystem</role>
          <field-name>repositorySystem</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>help</goal>
      <description>Display help information on android-maven-plugin.&lt;br&gt;
Call &lt;code&gt;mvn android:help -Ddetail=true -Dgoal=&amp;lt;goal-name&amp;gt;&lt;/code&gt; to display parameter details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.HelpMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>true</threadSafe>
      <parameters>
        <parameter>
          <name>detail</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If &lt;code&gt;true&lt;/code&gt;, display all settable properties for each goal.</description>
        </parameter>
        <parameter>
          <name>goal</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The name of the goal for which to show help. If unspecified, all goals will be displayed.</description>
        </parameter>
        <parameter>
          <name>indentSize</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of spaces per indentation level, should be positive.</description>
        </parameter>
        <parameter>
          <name>lineLength</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The maximum length of a display line, should be positive.</description>
        </parameter>
      </parameters>
      <configuration>
        <detail implementation="boolean" default-value="false">${detail}</detail>
        <goal implementation="java.lang.String">${goal}</goal>
        <indentSize implementation="int" default-value="2">${indentSize}</indentSize>
        <lineLength implementation="int" default-value="80">${lineLength}</lineLength>
      </configuration>
    </mojo>
    <mojo>
      <goal>instrument</goal>
      <description>Runs the instrumentation apk on device.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.InstrumentMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>mavenIgnoreTestError</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.error.ignore is commonly used with Maven to ignore test errors. We honor it too.
Ignore or not tests errors. If &lt;code&gt;true&lt;/code&gt; they will be ignored; if
&lt;code&gt;false&lt;/code&gt;, they will not. Default value is &lt;code&gt;false&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mavenIgnoreTestFailure</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.failure.ignore is commonly used with Maven to ignore test failures. We honor it too.
Ignore or not tests failures. If &lt;code&gt;true&lt;/code&gt; they will be ignored; if
&lt;code&gt;false&lt;/code&gt;, they will not. Default value is &lt;code&gt;false&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mavenSkipTests</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-DskipTests is commonly used with Maven to skip tests. We honor it too.</description>
        </parameter>
        <parameter>
          <name>mavenTestSkip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.skip is commonly used with Maven to skip tests. We honor it too.</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>com.simpligility.maven.plugins.android.configuration.Test</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configuration to use for running instrumentation tests. Complete configuration
is possible in the plugin configuration:
&lt;pre&gt;
&amp;lt;test&amp;gt;
  &amp;lt;skip&amp;gt;true|false|auto&amp;lt;/skip&amp;gt;
  &amp;lt;instrumentationPackage&amp;gt;packageName&amp;lt;/instrumentationPackage&amp;gt;
  &amp;lt;instrumentationRunner&amp;gt;className&amp;lt;/instrumentationRunner&amp;gt;
  &amp;lt;debug&amp;gt;true|false&amp;lt;/debug&amp;gt;
  &amp;lt;coverage&amp;gt;true|false&amp;lt;/coverage&amp;gt;
  &amp;lt;coverageFile&amp;gt;&amp;lt;/coverageFile&amp;gt;
  &amp;lt;logOnly&amp;gt;true|false&amp;lt;/logOnly&amp;gt;  avd
  &amp;lt;testSize&amp;gt;small|medium|large&amp;lt;/testSize&amp;gt;
  &amp;lt;createReport&amp;gt;true|false&amp;lt;/createReport&amp;gt;
  &amp;lt;classes&amp;gt;
    &amp;lt;class&amp;gt;your.package.name.YourTestClass&amp;lt;/class&amp;gt;
  &amp;lt;/classes&amp;gt;
  &amp;lt;packages&amp;gt;
    &amp;lt;package&amp;gt;your.package.name&amp;lt;/package&amp;gt;
  &amp;lt;/packages&amp;gt;
  &amp;lt;instrumentationArgs&amp;gt;
    &amp;lt;instrumentationArg&amp;gt;key value&amp;lt;/instrumentationArg&amp;gt;
  &amp;lt;/instrumentationArgs&amp;gt;
&amp;lt;/test&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>testAnnotations</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to execute tests which are annotated with the given annotations.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;annotations&amp;gt;
    &amp;lt;annotation&amp;gt;your.package.name.YourAnnotation&amp;lt;/annotation&amp;gt;
&amp;lt;/annotations&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.annotations=annotation1,annotation2</description>
        </parameter>
        <parameter>
          <name>testClasses</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to execute test classes which are specified as part of the instrumentation tests.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;classes&amp;gt;
    &amp;lt;class&amp;gt;your.package.name.YourTestClass&amp;lt;/class&amp;gt;
&amp;lt;/classes&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.classes=class1,class2</description>
        </parameter>
        <parameter>
          <name>testCoverage</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable or disable code coverage for this instrumentation test run.</description>
        </parameter>
        <parameter>
          <name>testCoverageFile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location on device into which coverage should be stored (blank for
Android default /data/data/your.package.here/files/coverage.ec).</description>
        </parameter>
        <parameter>
          <name>testCreateReport</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Create a junit xml format compatible output file containing
the test results for each device the instrumentation tests run
on.
&lt;br&gt;&lt;br&gt;
The files are stored in target/surefire-reports and named TEST-deviceid.xml.
The deviceid for an emulator is deviceSerialNumber_avdName_manufacturer_model.
The serial number is commonly emulator-5554 for the first emulator started
with numbers increasing. avdName is as defined in the SDK tool. The
manufacturer is typically &quot;unknown&quot; and the model is typically &quot;sdk&quot;.
The deviceid for an actual devices is
deviceSerialNumber_manufacturer_model.
&lt;br&gt;&lt;br&gt;
The file contains system properties from the system running
the Android Maven Plugin (JVM) and device properties from the
device/emulator the tests are running on.
&lt;br&gt;&lt;br&gt;
The file contains a single TestSuite for all tests and a
TestCase for each test method. Errors and failures are logged
in the file and the system log with full stack traces and other
details available.</description>
        </parameter>
        <parameter>
          <name>testDebug</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable debug causing the test runner to wait until debugger is
connected with the Android debug bridge (adb).</description>
        </parameter>
        <parameter>
          <name>testExcludeAnnotations</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to execute tests which are &lt;strong&gt;not&lt;/strong&gt; annotated with the given annotations.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;excludeAnnotations&amp;gt;
    &amp;lt;excludeAnnotation&amp;gt;your.package.name.YourAnnotation&amp;lt;/excludeAnnotation&amp;gt;
&amp;lt;/excludeAnnotations&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.excludeAnnotations=annotation1,annotation2</description>
        </parameter>
        <parameter>
          <name>testFailSafe</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables or disables integration safe failure.
If &lt;code&gt;true&lt;/code&gt; build will not stop on test failure or error.</description>
        </parameter>
        <parameter>
          <name>testInstrumentationArgs</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Extra instrumentation arguments.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;instrumentationArgs&amp;gt;
    &amp;lt;instrumentationArg&amp;gt;key value&amp;lt;/instrumentationArg&amp;gt;
    &amp;lt;instrumentationArg&amp;gt;key &apos;value with spaces&apos;&amp;lt;/instrumentationArg&amp;gt;
&amp;lt;/instrumentationArgs&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.instrumentationArgs=&quot;key1 value1&quot;,&quot;key2 &apos;value with spaces&apos;&quot;</description>
        </parameter>
        <parameter>
          <name>testInstrumentationPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Package name of the apk we wish to instrument. If not specified, it is inferred from
&lt;code&gt;AndroidManifest.xml&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>testInstrumentationRunner</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Class name of test runner. If not specified, it is inferred from &lt;code&gt;AndroidManifest.xml&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>testLogOnly</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable this flag to run a log only and not execute the tests.</description>
        </parameter>
        <parameter>
          <name>testPackages</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to execute tests only in given packages as part of the instrumentation tests.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;packages&amp;gt;
    &amp;lt;package&amp;gt;your.package.name&amp;lt;/package&amp;gt;
&amp;lt;/packages&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.packages=package1,package2</description>
        </parameter>
        <parameter>
          <name>testSkip</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables or disables integration test related goals. If &lt;code&gt;true&lt;/code&gt; they will be skipped; if
&lt;code&gt;false&lt;/code&gt;, they will be run. If &lt;code&gt;auto&lt;/code&gt;, they will run if any of the classes inherit from any
class in &lt;code&gt;junit.framework.**&lt;/code&gt; or &lt;code&gt;android.test.**&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>testTestSize</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>If specified only execute tests of certain size as defined by
the Android instrumentation testing SmallTest, MediumTest and
LargeTest annotations. Use &quot;small&quot;, &quot;medium&quot; or &quot;large&quot; as values.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <mavenIgnoreTestError implementation="boolean" default-value="false">${maven.test.error.ignore}</mavenIgnoreTestError>
        <mavenIgnoreTestFailure implementation="boolean" default-value="false">${maven.test.failure.ignore}</mavenIgnoreTestFailure>
        <mavenSkipTests implementation="boolean" default-value="false">${skipTests}</mavenSkipTests>
        <mavenTestSkip implementation="boolean" default-value="false">${maven.test.skip}</mavenTestSkip>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <testAnnotations implementation="java.util.List">${android.test.annotations}</testAnnotations>
        <testClasses implementation="java.util.List">${android.test.classes}</testClasses>
        <testCoverage implementation="java.lang.Boolean" default-value="false">${android.test.coverage}</testCoverage>
        <testCoverageFile implementation="java.lang.String">${android.test.coverageFile}</testCoverageFile>
        <testCreateReport implementation="java.lang.Boolean" default-value="true">${android.test.createreport}</testCreateReport>
        <testDebug implementation="java.lang.Boolean" default-value="false">${android.test.debug}</testDebug>
        <testExcludeAnnotations implementation="java.util.List">${android.test.excludeAnnotations}</testExcludeAnnotations>
        <testFailSafe implementation="java.lang.Boolean" default-value="true">${android.test.failsafe}</testFailSafe>
        <testInstrumentationArgs implementation="java.util.List">${android.test.instrumentationArgs}</testInstrumentationArgs>
        <testInstrumentationPackage implementation="java.lang.String">${android.test.instrumentationPackage}</testInstrumentationPackage>
        <testInstrumentationRunner implementation="java.lang.String">${android.test.instrumentationRunner}</testInstrumentationRunner>
        <testLogOnly implementation="java.lang.Boolean" default-value="false">${android.test.logonly}</testLogOnly>
        <testPackages implementation="java.util.List">${android.test.packages}</testPackages>
        <testSkip implementation="java.lang.String" default-value="auto">${android.test.skip}</testSkip>
        <testTestSize implementation="java.lang.String">${android.test.testsize}</testTestSize>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>internal-integration-test</goal>
      <description>Internal. Do not use.&lt;br&gt;
Called automatically when the lifecycle reaches phase &lt;code&gt;integration-test&lt;/code&gt;. Figures out whether to
call goals in this phase; and if so, calls &lt;code&gt;android:instrument&lt;/code&gt;.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>integration-test</phase>
      <implementation>com.simpligility.maven.plugins.android.phase12integrationtest.InternalIntegrationTestMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>mavenIgnoreTestError</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.error.ignore is commonly used with Maven to ignore test errors. We honor it too.
Ignore or not tests errors. If &lt;code&gt;true&lt;/code&gt; they will be ignored; if
&lt;code&gt;false&lt;/code&gt;, they will not. Default value is &lt;code&gt;false&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mavenIgnoreTestFailure</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.failure.ignore is commonly used with Maven to ignore test failures. We honor it too.
Ignore or not tests failures. If &lt;code&gt;true&lt;/code&gt; they will be ignored; if
&lt;code&gt;false&lt;/code&gt;, they will not. Default value is &lt;code&gt;false&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mavenSkipTests</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-DskipTests is commonly used with Maven to skip tests. We honor it too.</description>
        </parameter>
        <parameter>
          <name>mavenTestSkip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.skip is commonly used with Maven to skip tests. We honor it too.</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>com.simpligility.maven.plugins.android.configuration.Test</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configuration to use for running instrumentation tests. Complete configuration
is possible in the plugin configuration:
&lt;pre&gt;
&amp;lt;test&amp;gt;
  &amp;lt;skip&amp;gt;true|false|auto&amp;lt;/skip&amp;gt;
  &amp;lt;instrumentationPackage&amp;gt;packageName&amp;lt;/instrumentationPackage&amp;gt;
  &amp;lt;instrumentationRunner&amp;gt;className&amp;lt;/instrumentationRunner&amp;gt;
  &amp;lt;debug&amp;gt;true|false&amp;lt;/debug&amp;gt;
  &amp;lt;coverage&amp;gt;true|false&amp;lt;/coverage&amp;gt;
  &amp;lt;coverageFile&amp;gt;&amp;lt;/coverageFile&amp;gt;
  &amp;lt;logOnly&amp;gt;true|false&amp;lt;/logOnly&amp;gt;  avd
  &amp;lt;testSize&amp;gt;small|medium|large&amp;lt;/testSize&amp;gt;
  &amp;lt;createReport&amp;gt;true|false&amp;lt;/createReport&amp;gt;
  &amp;lt;classes&amp;gt;
    &amp;lt;class&amp;gt;your.package.name.YourTestClass&amp;lt;/class&amp;gt;
  &amp;lt;/classes&amp;gt;
  &amp;lt;packages&amp;gt;
    &amp;lt;package&amp;gt;your.package.name&amp;lt;/package&amp;gt;
  &amp;lt;/packages&amp;gt;
  &amp;lt;instrumentationArgs&amp;gt;
    &amp;lt;instrumentationArg&amp;gt;key value&amp;lt;/instrumentationArg&amp;gt;
  &amp;lt;/instrumentationArgs&amp;gt;
&amp;lt;/test&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>testAnnotations</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to execute tests which are annotated with the given annotations.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;annotations&amp;gt;
    &amp;lt;annotation&amp;gt;your.package.name.YourAnnotation&amp;lt;/annotation&amp;gt;
&amp;lt;/annotations&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.annotations=annotation1,annotation2</description>
        </parameter>
        <parameter>
          <name>testClasses</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to execute test classes which are specified as part of the instrumentation tests.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;classes&amp;gt;
    &amp;lt;class&amp;gt;your.package.name.YourTestClass&amp;lt;/class&amp;gt;
&amp;lt;/classes&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.classes=class1,class2</description>
        </parameter>
        <parameter>
          <name>testCoverage</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable or disable code coverage for this instrumentation test run.</description>
        </parameter>
        <parameter>
          <name>testCoverageFile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location on device into which coverage should be stored (blank for
Android default /data/data/your.package.here/files/coverage.ec).</description>
        </parameter>
        <parameter>
          <name>testCreateReport</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Create a junit xml format compatible output file containing
the test results for each device the instrumentation tests run
on.
&lt;br&gt;&lt;br&gt;
The files are stored in target/surefire-reports and named TEST-deviceid.xml.
The deviceid for an emulator is deviceSerialNumber_avdName_manufacturer_model.
The serial number is commonly emulator-5554 for the first emulator started
with numbers increasing. avdName is as defined in the SDK tool. The
manufacturer is typically &quot;unknown&quot; and the model is typically &quot;sdk&quot;.
The deviceid for an actual devices is
deviceSerialNumber_manufacturer_model.
&lt;br&gt;&lt;br&gt;
The file contains system properties from the system running
the Android Maven Plugin (JVM) and device properties from the
device/emulator the tests are running on.
&lt;br&gt;&lt;br&gt;
The file contains a single TestSuite for all tests and a
TestCase for each test method. Errors and failures are logged
in the file and the system log with full stack traces and other
details available.</description>
        </parameter>
        <parameter>
          <name>testDebug</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable debug causing the test runner to wait until debugger is
connected with the Android debug bridge (adb).</description>
        </parameter>
        <parameter>
          <name>testExcludeAnnotations</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to execute tests which are &lt;strong&gt;not&lt;/strong&gt; annotated with the given annotations.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;excludeAnnotations&amp;gt;
    &amp;lt;excludeAnnotation&amp;gt;your.package.name.YourAnnotation&amp;lt;/excludeAnnotation&amp;gt;
&amp;lt;/excludeAnnotations&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.excludeAnnotations=annotation1,annotation2</description>
        </parameter>
        <parameter>
          <name>testFailSafe</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables or disables integration safe failure.
If &lt;code&gt;true&lt;/code&gt; build will not stop on test failure or error.</description>
        </parameter>
        <parameter>
          <name>testInstrumentationArgs</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Extra instrumentation arguments.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;instrumentationArgs&amp;gt;
    &amp;lt;instrumentationArg&amp;gt;key value&amp;lt;/instrumentationArg&amp;gt;
    &amp;lt;instrumentationArg&amp;gt;key &apos;value with spaces&apos;&amp;lt;/instrumentationArg&amp;gt;
&amp;lt;/instrumentationArgs&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.instrumentationArgs=&quot;key1 value1&quot;,&quot;key2 &apos;value with spaces&apos;&quot;</description>
        </parameter>
        <parameter>
          <name>testInstrumentationPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Package name of the apk we wish to instrument. If not specified, it is inferred from
&lt;code&gt;AndroidManifest.xml&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>testInstrumentationRunner</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Class name of test runner. If not specified, it is inferred from &lt;code&gt;AndroidManifest.xml&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>testLogOnly</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable this flag to run a log only and not execute the tests.</description>
        </parameter>
        <parameter>
          <name>testPackages</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to execute tests only in given packages as part of the instrumentation tests.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;packages&amp;gt;
    &amp;lt;package&amp;gt;your.package.name&amp;lt;/package&amp;gt;
&amp;lt;/packages&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.packages=package1,package2</description>
        </parameter>
        <parameter>
          <name>testSkip</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables or disables integration test related goals. If &lt;code&gt;true&lt;/code&gt; they will be skipped; if
&lt;code&gt;false&lt;/code&gt;, they will be run. If &lt;code&gt;auto&lt;/code&gt;, they will run if any of the classes inherit from any
class in &lt;code&gt;junit.framework.**&lt;/code&gt; or &lt;code&gt;android.test.**&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>testTestSize</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>If specified only execute tests of certain size as defined by
the Android instrumentation testing SmallTest, MediumTest and
LargeTest annotations. Use &quot;small&quot;, &quot;medium&quot; or &quot;large&quot; as values.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <mavenIgnoreTestError implementation="boolean" default-value="false">${maven.test.error.ignore}</mavenIgnoreTestError>
        <mavenIgnoreTestFailure implementation="boolean" default-value="false">${maven.test.failure.ignore}</mavenIgnoreTestFailure>
        <mavenSkipTests implementation="boolean" default-value="false">${skipTests}</mavenSkipTests>
        <mavenTestSkip implementation="boolean" default-value="false">${maven.test.skip}</mavenTestSkip>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <testAnnotations implementation="java.util.List">${android.test.annotations}</testAnnotations>
        <testClasses implementation="java.util.List">${android.test.classes}</testClasses>
        <testCoverage implementation="java.lang.Boolean" default-value="false">${android.test.coverage}</testCoverage>
        <testCoverageFile implementation="java.lang.String">${android.test.coverageFile}</testCoverageFile>
        <testCreateReport implementation="java.lang.Boolean" default-value="true">${android.test.createreport}</testCreateReport>
        <testDebug implementation="java.lang.Boolean" default-value="false">${android.test.debug}</testDebug>
        <testExcludeAnnotations implementation="java.util.List">${android.test.excludeAnnotations}</testExcludeAnnotations>
        <testFailSafe implementation="java.lang.Boolean" default-value="true">${android.test.failsafe}</testFailSafe>
        <testInstrumentationArgs implementation="java.util.List">${android.test.instrumentationArgs}</testInstrumentationArgs>
        <testInstrumentationPackage implementation="java.lang.String">${android.test.instrumentationPackage}</testInstrumentationPackage>
        <testInstrumentationRunner implementation="java.lang.String">${android.test.instrumentationRunner}</testInstrumentationRunner>
        <testLogOnly implementation="java.lang.Boolean" default-value="false">${android.test.logonly}</testLogOnly>
        <testPackages implementation="java.util.List">${android.test.packages}</testPackages>
        <testSkip implementation="java.lang.String" default-value="auto">${android.test.skip}</testSkip>
        <testTestSize implementation="java.lang.String">${android.test.testsize}</testTestSize>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>internal-pre-integration-test</goal>
      <description>Internal. Do not use.&lt;br&gt;
Called automatically when the lifecycle reaches phase &lt;code&gt;pre-integration-test&lt;/code&gt;. Figures out whether to
call goals in this phase; and if so, calls &lt;code&gt;android:deploy-dependencies&lt;/code&gt; and &lt;code&gt;android:deploy&lt;/code&gt;.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>pre-integration-test</phase>
      <implementation>com.simpligility.maven.plugins.android.phase11preintegrationtest.InternalPreIntegrationTestMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>mavenIgnoreTestError</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.error.ignore is commonly used with Maven to ignore test errors. We honor it too.
Ignore or not tests errors. If &lt;code&gt;true&lt;/code&gt; they will be ignored; if
&lt;code&gt;false&lt;/code&gt;, they will not. Default value is &lt;code&gt;false&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mavenIgnoreTestFailure</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.failure.ignore is commonly used with Maven to ignore test failures. We honor it too.
Ignore or not tests failures. If &lt;code&gt;true&lt;/code&gt; they will be ignored; if
&lt;code&gt;false&lt;/code&gt;, they will not. Default value is &lt;code&gt;false&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>mavenSkipTests</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-DskipTests is commonly used with Maven to skip tests. We honor it too.</description>
        </parameter>
        <parameter>
          <name>mavenTestSkip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.skip is commonly used with Maven to skip tests. We honor it too.</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>test</name>
          <type>com.simpligility.maven.plugins.android.configuration.Test</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configuration to use for running instrumentation tests. Complete configuration
is possible in the plugin configuration:
&lt;pre&gt;
&amp;lt;test&amp;gt;
  &amp;lt;skip&amp;gt;true|false|auto&amp;lt;/skip&amp;gt;
  &amp;lt;instrumentationPackage&amp;gt;packageName&amp;lt;/instrumentationPackage&amp;gt;
  &amp;lt;instrumentationRunner&amp;gt;className&amp;lt;/instrumentationRunner&amp;gt;
  &amp;lt;debug&amp;gt;true|false&amp;lt;/debug&amp;gt;
  &amp;lt;coverage&amp;gt;true|false&amp;lt;/coverage&amp;gt;
  &amp;lt;coverageFile&amp;gt;&amp;lt;/coverageFile&amp;gt;
  &amp;lt;logOnly&amp;gt;true|false&amp;lt;/logOnly&amp;gt;  avd
  &amp;lt;testSize&amp;gt;small|medium|large&amp;lt;/testSize&amp;gt;
  &amp;lt;createReport&amp;gt;true|false&amp;lt;/createReport&amp;gt;
  &amp;lt;classes&amp;gt;
    &amp;lt;class&amp;gt;your.package.name.YourTestClass&amp;lt;/class&amp;gt;
  &amp;lt;/classes&amp;gt;
  &amp;lt;packages&amp;gt;
    &amp;lt;package&amp;gt;your.package.name&amp;lt;/package&amp;gt;
  &amp;lt;/packages&amp;gt;
  &amp;lt;instrumentationArgs&amp;gt;
    &amp;lt;instrumentationArg&amp;gt;key value&amp;lt;/instrumentationArg&amp;gt;
  &amp;lt;/instrumentationArgs&amp;gt;
&amp;lt;/test&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>testAnnotations</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to execute tests which are annotated with the given annotations.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;annotations&amp;gt;
    &amp;lt;annotation&amp;gt;your.package.name.YourAnnotation&amp;lt;/annotation&amp;gt;
&amp;lt;/annotations&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.annotations=annotation1,annotation2</description>
        </parameter>
        <parameter>
          <name>testClasses</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to execute test classes which are specified as part of the instrumentation tests.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;classes&amp;gt;
    &amp;lt;class&amp;gt;your.package.name.YourTestClass&amp;lt;/class&amp;gt;
&amp;lt;/classes&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.classes=class1,class2</description>
        </parameter>
        <parameter>
          <name>testCoverage</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable or disable code coverage for this instrumentation test run.</description>
        </parameter>
        <parameter>
          <name>testCoverageFile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location on device into which coverage should be stored (blank for
Android default /data/data/your.package.here/files/coverage.ec).</description>
        </parameter>
        <parameter>
          <name>testCreateReport</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Create a junit xml format compatible output file containing
the test results for each device the instrumentation tests run
on.
&lt;br&gt;&lt;br&gt;
The files are stored in target/surefire-reports and named TEST-deviceid.xml.
The deviceid for an emulator is deviceSerialNumber_avdName_manufacturer_model.
The serial number is commonly emulator-5554 for the first emulator started
with numbers increasing. avdName is as defined in the SDK tool. The
manufacturer is typically &quot;unknown&quot; and the model is typically &quot;sdk&quot;.
The deviceid for an actual devices is
deviceSerialNumber_manufacturer_model.
&lt;br&gt;&lt;br&gt;
The file contains system properties from the system running
the Android Maven Plugin (JVM) and device properties from the
device/emulator the tests are running on.
&lt;br&gt;&lt;br&gt;
The file contains a single TestSuite for all tests and a
TestCase for each test method. Errors and failures are logged
in the file and the system log with full stack traces and other
details available.</description>
        </parameter>
        <parameter>
          <name>testDebug</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable debug causing the test runner to wait until debugger is
connected with the Android debug bridge (adb).</description>
        </parameter>
        <parameter>
          <name>testExcludeAnnotations</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to execute tests which are &lt;strong&gt;not&lt;/strong&gt; annotated with the given annotations.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;excludeAnnotations&amp;gt;
    &amp;lt;excludeAnnotation&amp;gt;your.package.name.YourAnnotation&amp;lt;/excludeAnnotation&amp;gt;
&amp;lt;/excludeAnnotations&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.excludeAnnotations=annotation1,annotation2</description>
        </parameter>
        <parameter>
          <name>testFailSafe</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables or disables integration safe failure.
If &lt;code&gt;true&lt;/code&gt; build will not stop on test failure or error.</description>
        </parameter>
        <parameter>
          <name>testInstrumentationArgs</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Extra instrumentation arguments.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;instrumentationArgs&amp;gt;
    &amp;lt;instrumentationArg&amp;gt;key value&amp;lt;/instrumentationArg&amp;gt;
    &amp;lt;instrumentationArg&amp;gt;key &apos;value with spaces&apos;&amp;lt;/instrumentationArg&amp;gt;
&amp;lt;/instrumentationArgs&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.instrumentationArgs=&quot;key1 value1&quot;,&quot;key2 &apos;value with spaces&apos;&quot;</description>
        </parameter>
        <parameter>
          <name>testInstrumentationPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Package name of the apk we wish to instrument. If not specified, it is inferred from
&lt;code&gt;AndroidManifest.xml&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>testInstrumentationRunner</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Class name of test runner. If not specified, it is inferred from &lt;code&gt;AndroidManifest.xml&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>testLogOnly</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable this flag to run a log only and not execute the tests.</description>
        </parameter>
        <parameter>
          <name>testPackages</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to execute tests only in given packages as part of the instrumentation tests.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;packages&amp;gt;
    &amp;lt;package&amp;gt;your.package.name&amp;lt;/package&amp;gt;
&amp;lt;/packages&amp;gt;
&lt;/pre&gt;
or as e.g. -Dandroid.test.packages=package1,package2</description>
        </parameter>
        <parameter>
          <name>testSkip</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables or disables integration test related goals. If &lt;code&gt;true&lt;/code&gt; they will be skipped; if
&lt;code&gt;false&lt;/code&gt;, they will be run. If &lt;code&gt;auto&lt;/code&gt;, they will run if any of the classes inherit from any
class in &lt;code&gt;junit.framework.**&lt;/code&gt; or &lt;code&gt;android.test.**&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>testTestSize</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>If specified only execute tests of certain size as defined by
the Android instrumentation testing SmallTest, MediumTest and
LargeTest annotations. Use &quot;small&quot;, &quot;medium&quot; or &quot;large&quot; as values.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <mavenIgnoreTestError implementation="boolean" default-value="false">${maven.test.error.ignore}</mavenIgnoreTestError>
        <mavenIgnoreTestFailure implementation="boolean" default-value="false">${maven.test.failure.ignore}</mavenIgnoreTestFailure>
        <mavenSkipTests implementation="boolean" default-value="false">${skipTests}</mavenSkipTests>
        <mavenTestSkip implementation="boolean" default-value="false">${maven.test.skip}</mavenTestSkip>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <testAnnotations implementation="java.util.List">${android.test.annotations}</testAnnotations>
        <testClasses implementation="java.util.List">${android.test.classes}</testClasses>
        <testCoverage implementation="java.lang.Boolean" default-value="false">${android.test.coverage}</testCoverage>
        <testCoverageFile implementation="java.lang.String">${android.test.coverageFile}</testCoverageFile>
        <testCreateReport implementation="java.lang.Boolean" default-value="true">${android.test.createreport}</testCreateReport>
        <testDebug implementation="java.lang.Boolean" default-value="false">${android.test.debug}</testDebug>
        <testExcludeAnnotations implementation="java.util.List">${android.test.excludeAnnotations}</testExcludeAnnotations>
        <testFailSafe implementation="java.lang.Boolean" default-value="true">${android.test.failsafe}</testFailSafe>
        <testInstrumentationArgs implementation="java.util.List">${android.test.instrumentationArgs}</testInstrumentationArgs>
        <testInstrumentationPackage implementation="java.lang.String">${android.test.instrumentationPackage}</testInstrumentationPackage>
        <testInstrumentationRunner implementation="java.lang.String">${android.test.instrumentationRunner}</testInstrumentationRunner>
        <testLogOnly implementation="java.lang.Boolean" default-value="false">${android.test.logonly}</testLogOnly>
        <testPackages implementation="java.util.List">${android.test.packages}</testPackages>
        <testSkip implementation="java.lang.String" default-value="auto">${android.test.skip}</testSkip>
        <testTestSize implementation="java.lang.String">${android.test.testsize}</testTestSize>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>lint</goal>
      <description>LintMojo can run the lint command against the project. Implements parsing parameters from pom or command line
arguments and sets useful defaults as well. Warning, if you use android.lint.enableClasspath and/or
android.lint.enableLibraries the behavior of this goal will vary depending on the phase where this goal is executed.
See android.lint.classpath/lintClassPath and android.lint.libraries/lintLibraries for more details.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.LintMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>legacy</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>lint</name>
          <type>com.simpligility.maven.plugins.android.configuration.Lint</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configuration for the lint goal. As soon as a lint goal is invoked the command will be executed unless the
skip parameter is set. A minimal configuration that will run lint and produce a XML report in
${project.build.directory}/lint/lint-results.xml is

&lt;pre&gt;
&amp;lt;lint&amp;gt;
    &amp;lt;skip&amp;gt;false&amp;lt;/skip&amp;gt;
&amp;lt;/lint&amp;gt;
&lt;/pre&gt;

Full configuration can use these parameters.

&lt;pre&gt;
&amp;lt;lint&amp;gt;
    &amp;lt;failOnError&amp;gt;true|false&amp;lt;/failOnError&amp;gt;
    &amp;lt;skip&amp;gt;true|false&amp;lt;/skip&amp;gt;
    &amp;lt;ignoreWarnings&amp;gt;true|false&amp;lt;/ignoreWarnings&amp;gt;
    &amp;lt;warnAll&amp;gt;true|false&amp;lt;/warnAll&amp;gt;
    &amp;lt;warningsAsErrors&amp;gt;true|false&amp;lt;/warningsAsErrors&amp;gt;
    &amp;lt;config&amp;gt;&amp;lt;/config&amp;gt;
    &amp;lt;fullPath&amp;gt;true|false&amp;lt;/fullPath&amp;gt;
    &amp;lt;showAll&amp;gt;true|false&amp;lt;/showAll&amp;gt;
    &amp;lt;disableSourceLines&amp;gt;true|false&amp;lt;/disableSourceLines&amp;gt;
    &amp;lt;url&amp;gt;none|a=b&amp;lt;/url&amp;gt;
    &amp;lt;enableHtml&amp;gt;true|false&amp;lt;/enableHtml&amp;gt;
    &amp;lt;htmlOutputPath&amp;gt;${project.build.directory}/lint-results/lint-results-html/&amp;lt;/htmlOutputPath&amp;gt;
    &amp;lt;enableSimpleHtml&amp;gt;true|false&amp;lt;/enableSimpleHtml&amp;gt;
    &amp;lt;simpleHtmlOutputPath&amp;gt;${project.build.directory}/lint-results/lint-results-simple-html
    &amp;lt;/simpleHtmlOutputPath&amp;gt;
    &amp;lt;enableXml&amp;gt;true|false&amp;lt;/enableXml&amp;gt;
    &amp;lt;xmlOutputPath&amp;gt;${project.build.directory}/lint-results/lint-results.xml&amp;lt;/xmlOutputPath&amp;gt;
    &amp;lt;enableSources&amp;gt;true|false&amp;lt;/enableSources&amp;gt;
    &amp;lt;sources&amp;gt;${project.build.sourceDirecory}}&amp;lt;/sources&amp;gt;
    &amp;lt;enableClasspath&amp;gt;true|false&amp;lt;/enableClasspath&amp;gt;
    &amp;lt;classpath&amp;gt;${project.build.outputDirectory}&amp;lt;/classpath&amp;gt;
    &amp;lt;enableLibraries&amp;gt;true|false&amp;lt;/enableLibraries&amp;gt;
    &amp;lt;libraries&amp;gt;&amp;lt;/libraries&amp;gt;
&amp;lt;/lint&amp;gt;
&lt;/pre&gt;


Alternatively to the plugin configuration values can also be configured as properties on the command line as
android.lint.* or in pom or settings file as properties like lint*.</description>
        </parameter>
        <parameter>
          <name>lintClasspath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add the given folder (or jar file, or path) as a class directory for the project. Only valid when running lint on
a single project. Defaults to ${project.build.outputDirectory}. Consequently, the lint output depends on the
phase during which this goal is executed, whether project has been compiled or not.</description>
        </parameter>
        <parameter>
          <name>lintConfig</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Use the given configuration file to determine whether issues are enabled or disabled. Defaults is &quot;null&quot; so no
config file will be used. To use the commonly used lint.xml in the project root set the parameter to
&quot;${project.basedir}/lint.xml&quot;.</description>
        </parameter>
        <parameter>
          <name>lintDisableSourceLines</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Do not include the source file lines with errors in the output. By default, the error output includes snippets of
source code on the line containing the error, but this flag turns it off. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>lintEnableClasspath</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable including classpath into lint analysis. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>lintEnableHtml</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable the creation of a HTML report. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>lintEnableLibraries</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable including libraries into lint analysis. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>lintEnableSimpleHtml</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable the creation of a simple HTML report. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>lintEnableSource</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable including sources into lint analysis. Defaults to &quot;true&quot;.</description>
        </parameter>
        <parameter>
          <name>lintEnableXml</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enable the creation of a XML report. Defaults to &quot;true&quot;.</description>
        </parameter>
        <parameter>
          <name>lintFailOnError</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Fail build on lint errors. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>lintFullPath</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Use full paths in the error output. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>lintHtmlOutputPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path for the HTML report. If the filename is a directory (or a new filename without an extension), lint will
create a separate report for each scanned project. Defaults to ${project.build.directory}/lint/lint-html/.</description>
        </parameter>
        <parameter>
          <name>lintIgnoreWarnings</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Only check for errors and ignore warnings. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>lintLibraries</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add the given folder (or jar file, or path) as a class library for the project. Only valid when running lint on a
single project. Defaults to all non provided resolved artifacts. Consequently, the lint output depends on the
phase during which this goal is executed, whether project&apos;s dependencies have been resolved or not.</description>
        </parameter>
        <parameter>
          <name>lintShowAll</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Do not truncate long messages, lists of alternate locations, etc. Defaults to &quot;true&quot;.</description>
        </parameter>
        <parameter>
          <name>lintSimpleHtmlOutputPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Create a simple HTML report. If the filename is a directory (or a new filename without an extension), lint will
create a separate report for each scanned project. Defaults to ${project.build.directory}/lint/lint-simple-html/.</description>
        </parameter>
        <parameter>
          <name>lintSkip</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the lint goal execution. Defaults to &quot;true&quot;.</description>
        </parameter>
        <parameter>
          <name>lintSources</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add the given folder (or path) as a source directory for the project. Only valid when running lint on a single
project. Defaults to ${project.build.sourceDirectory}.</description>
        </parameter>
        <parameter>
          <name>lintUrl</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Add links to HTML report, replacing local path prefixes with url prefix. The mapping can be a comma-separated
list of path prefixes to corresponding URL prefixes, such as C:\temp\Proj1=http://buildserver/sources/temp/Proj1.
To turn off linking to files, use --url none. Defaults to &quot;none&quot;.</description>
        </parameter>
        <parameter>
          <name>lintWarnAll</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Check all warnings, including those off by default. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>lintWarningsAsErrors</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Report all warnings as errors. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>lintXmlOutputPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Create an XML report. If the filename is a directory (or a new filename without an extension), lint will create a
separate report for each scanned project. Defaults to ${project.build.directory}/lint/lint-results.xml.</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>quiet</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <legacy implementation="java.lang.Boolean">${android.lint.legacy}</legacy>
        <lintClasspath implementation="java.lang.String">${android.lint.classpath}</lintClasspath>
        <lintConfig implementation="java.lang.String">${android.lint.config}</lintConfig>
        <lintDisableSourceLines implementation="java.lang.Boolean">${android.lint.disableSourceLines}</lintDisableSourceLines>
        <lintEnableClasspath implementation="java.lang.Boolean">${android.lint.enableSources}</lintEnableClasspath>
        <lintEnableHtml implementation="java.lang.Boolean">${android.lint.enableHtml}</lintEnableHtml>
        <lintEnableLibraries implementation="java.lang.Boolean">${android.lint.enableSources}</lintEnableLibraries>
        <lintEnableSimpleHtml implementation="java.lang.Boolean">${android.lint.enableSimpleHtml}</lintEnableSimpleHtml>
        <lintEnableSource implementation="java.lang.Boolean">${android.lint.enableSources}</lintEnableSource>
        <lintEnableXml implementation="java.lang.Boolean">${android.lint.enableXml}</lintEnableXml>
        <lintFailOnError implementation="java.lang.Boolean">${android.lint.failOnError}</lintFailOnError>
        <lintFullPath implementation="java.lang.Boolean">${android.lint.fullPath}</lintFullPath>
        <lintHtmlOutputPath implementation="java.lang.String">${android.lint.htmlOutputPath}</lintHtmlOutputPath>
        <lintIgnoreWarnings implementation="java.lang.Boolean">${android.lint.ignoreWarning}</lintIgnoreWarnings>
        <lintLibraries implementation="java.lang.String">${android.lint.libraries}</lintLibraries>
        <lintShowAll implementation="java.lang.Boolean">${android.lint.showAll}</lintShowAll>
        <lintSimpleHtmlOutputPath implementation="java.lang.String">${android.lint.simpleHtmlOutputPath}</lintSimpleHtmlOutputPath>
        <lintSkip implementation="java.lang.Boolean">${android.lint.skip}</lintSkip>
        <lintSources implementation="java.lang.String">${android.lint.sources}</lintSources>
        <lintUrl implementation="java.lang.String">${android.lint.url}</lintUrl>
        <lintWarnAll implementation="java.lang.Boolean">${android.lint.warnAll}</lintWarnAll>
        <lintWarningsAsErrors implementation="java.lang.Boolean">${android.lint.warningsAsErrors}</lintWarningsAsErrors>
        <lintXmlOutputPath implementation="java.lang.String">${android.lint.xmlOutputPath}</lintXmlOutputPath>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <quiet implementation="java.lang.Boolean">${android.lint.quiet}</quiet>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>manifest-merger</goal>
      <description>Manifest Merger V2 &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.
http://tools.android.com/tech-docs/new-build-system/user-guide/manifest-merger</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>process-resources</phase>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.ManifestMergerMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>manifestMergeLibraries</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Merge Manifest with library projects. Exposed via the project property
&lt;code&gt;android.manifestMerger.mergeLibraries&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestMergeReportFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Merge Manifest with library projects. Exposed via the project property
&lt;code&gt;android.manifestMerger.mergeLibraries&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestMerger</name>
          <type>com.simpligility.maven.plugins.android.configuration.ManifestMerger</type>
          <required>false</required>
          <editable>true</editable>
          <description>Configuration for the manifest-update goal.
&lt;p&gt;
You can configure this mojo to update the following basic manifestMerger attributes:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;android:versionName&lt;/code&gt; on the &lt;code&gt;manifestMerger&lt;/code&gt; element.
&lt;code&gt;android:versionCode&lt;/code&gt; on the &lt;code&gt;manifestMerger&lt;/code&gt; element.
&lt;/p&gt;
&lt;p&gt;
You can configure attributes in the plugin configuration like so

&lt;pre&gt;
  &amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;com.jayway.maven.plugins.android.generation2&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;android-maven-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;executions&amp;gt;
      &amp;lt;execution&amp;gt;
        &amp;lt;id&amp;gt;merge-manifest&amp;lt;/id&amp;gt;
        &amp;lt;goals&amp;gt;
          &amp;lt;goal&amp;gt;manifest-merger&amp;lt;/goal&amp;gt;
        &amp;lt;/goals&amp;gt;
        &amp;lt;configuration&amp;gt;
          &amp;lt;manifestMerger&amp;gt;
            &amp;lt;versionName&amp;gt;&amp;lt;/versionName&amp;gt;
            &amp;lt;versionCode&amp;gt;123&amp;lt;/versionCode&amp;gt;
            &amp;lt;versionCodeUpdateFromVersion&amp;gt;true|false&amp;lt;/versionCodeUpdateFromVersion&amp;gt;
            &amp;lt;versionNamingPattern&amp;gt;&amp;lt;/versionNamingPattern&amp;gt;
            &amp;lt;mergeLibraries&amp;gt;true|false&amp;lt;/mergeLibraries&amp;gt;
            &amp;lt;mergeReportFile&amp;gt;${project.build.directory}/ManifestMergeReport.txt&amp;lt;/mergeReportFile&amp;gt;
            &amp;lt;usesSdk&amp;gt;
              &amp;lt;minSdkVersion&amp;gt;14&amp;lt;/minSdkVersion&amp;gt;
              &amp;lt;targetSdkVersion&amp;gt;21&amp;lt;/targetSdkVersion&amp;gt;
            &amp;lt;/usesSdk&amp;gt;
          &amp;lt;/manifestMerger&amp;gt;
        &amp;lt;/configuration&amp;gt;
      &amp;lt;/execution&amp;gt;
    &amp;lt;/executions&amp;gt;
  &amp;lt;/plugin&amp;gt;
&lt;/pre&gt;

or use properties set in the pom or settings file or supplied as command line parameter. Add
&quot;android.&quot; in front of the property name for command line usage. All parameters follow a
manifestMerger.* naming convention.</description>
        </parameter>
        <parameter>
          <name>manifestVersionCode</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Update the &lt;code&gt;android:versionCode&lt;/code&gt; attribute with the specified parameter. Exposed via
the project property &lt;code&gt;android.manifestMerger.versionCode&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestVersionCodeUpdateFromVersion</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Update the &lt;code&gt;android:versionCode&lt;/code&gt; attribute automatically from the project version
e.g 3.2.1 will become version code 3002001. As described in this blog post
http://www.simpligility.com/2010/11/release-version-management-for-your-android-application/
but done without using resource filtering. The value is exposed via the project property
property &lt;code&gt;android.manifest.versionCodeUpdateFromVersion&lt;/code&gt; and the resulting value
as &lt;code&gt;android.manifest.versionCode&lt;/code&gt;.
For the purpose of generating the versionCode, if a version element is missing it is presumed to be 0.
The maximum values for the version increment and version minor values are 999,
the version major should be no larger than 2000.  Any other suffixes do not
participate in the version code generation.</description>
        </parameter>
        <parameter>
          <name>manifestVersionDigits</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The number of digits per version element. Must be specified as a comma/semicolon separated list of
digits, one for each version element, Exposed via the project property
&lt;code&gt;android.manifestMerger.versionDigits&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestVersionName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Update the &lt;code&gt;android:versionName&lt;/code&gt; with the specified parameter. If left empty it
will use the version number of the project. Exposed via the project property
&lt;code&gt;android.manifestMerger.versionName&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestVersionNamingPattern</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Optionally use a pattern to match version elements for automatic generation of version codes,
useful in case of complex version naming schemes. The new behavior is disabled by default;
set the pattern to a non-empty string to activate. Otherwise, continue using the old
behavior of separating version elements by dots and ignoring all non-digit characters.
The pattern is standard Java regex. Capturing groups in the pattern are sequentially passed
to the version code generator, while other parts are ignored. Be sure to properly escape
your pattern string, in case you use characters that have special meaning in XML.
Exposed via the project property
&lt;code&gt;android.manifestMerger.versionNamingPattern&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <manifestMergeLibraries implementation="java.lang.Boolean" default-value="false">${android.manifestMerger.mergeLibraries}</manifestMergeLibraries>
        <manifestMergeReportFile implementation="java.io.File">${android.manifestMerger.mergeReportFile}</manifestMergeReportFile>
        <manifestVersionCode implementation="java.lang.Integer" default-value="1">${android.manifestMerger.versionCode}</manifestVersionCode>
        <manifestVersionCodeUpdateFromVersion implementation="java.lang.Boolean" default-value="false">${android.manifest.versionCodeUpdateFromVersion}</manifestVersionCodeUpdateFromVersion>
        <manifestVersionDigits implementation="java.lang.String" default-value="4,3,3">${android.manifestMerger.versionDigits}</manifestVersionDigits>
        <manifestVersionName implementation="java.lang.String" default-value="${project.version}">${android.manifestMerger.versionName}</manifestVersionName>
        <manifestVersionNamingPattern implementation="java.lang.String">${android.manifestMerger.versionNamingPattern}</manifestVersionNamingPattern>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>manifest-update</goal>
      <description>Updates various version attributes present in the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>process-resources</phase>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.ManifestUpdateMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <deprecated>Use manifest-merger v2 mojo instead
{@link com.simpligility.maven.plugins.android.standalonemojos.ManifestMergerMojo}</deprecated>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>manifest</name>
          <type>com.simpligility.maven.plugins.android.configuration.Manifest</type>
          <required>false</required>
          <editable>true</editable>
          <description>Configuration for the manifest-update goal.
&lt;p&gt;
You can configure this mojo to update the following basic manifest attributes:
&lt;/p&gt;
&lt;p&gt;
&lt;code&gt;android:versionName&lt;/code&gt; on the &lt;code&gt;manifest&lt;/code&gt; element.
&lt;code&gt;android:versionCode&lt;/code&gt; on the &lt;code&gt;manifest&lt;/code&gt; element.
&lt;code&gt;android:sharedUserId&lt;/code&gt; on the &lt;code&gt;manifest&lt;/code&gt; element.
&lt;code&gt;android:debuggable&lt;/code&gt; on the &lt;code&gt;application&lt;/code&gt; element.
&lt;/p&gt;
&lt;p&gt;
Moreover, you may specify custom values for the &lt;code&gt;supports-screens&lt;/code&gt; and
&lt;code&gt;compatible-screens&lt;/code&gt; elements. This is useful if you&apos;re using custom build
profiles to build APKs tailored to specific screen configurations. Values passed via POM
configuration for these elements will be merged with whatever is found in the Manifest file.
Values defined in the POM will take precedence.
&lt;/p&gt;

Note: This process will reformat the &lt;code&gt;AndroidManifest.xml&lt;/code&gt; per JAXP
{@link Transformer} defaults if updates are made to the manifest.

You can configure attributes in the plugin configuration like so

&lt;pre&gt;
  &amp;lt;plugin&amp;gt;
    &amp;lt;groupId&amp;gt;com.jayway.maven.plugins.android.generation2&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;android-maven-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;executions&amp;gt;
      &amp;lt;execution&amp;gt;
        &amp;lt;id&amp;gt;update-manifest&amp;lt;/id&amp;gt;
        &amp;lt;goals&amp;gt;
          &amp;lt;goal&amp;gt;manifest-update&amp;lt;/goal&amp;gt;
        &amp;lt;/goals&amp;gt;
        &amp;lt;configuration&amp;gt;
          &amp;lt;manifest&amp;gt;
            &amp;lt;versionName&amp;gt;&amp;lt;/versionName&amp;gt;
            &amp;lt;versionCode&amp;gt;123&amp;lt;/versionCode&amp;gt;
            &amp;lt;versionCodeAutoIncrement&amp;gt;true|false&amp;lt;/versionCodeAutoIncrement&amp;gt;
            &amp;lt;versionCodeUpdateFromVersion&amp;gt;true|false&amp;lt;/versionCodeUpdateFromVersion&amp;gt;
            &amp;lt;sharedUserId&amp;gt;anId&amp;lt;/sharedUserId&amp;gt;
            &amp;lt;debuggable&amp;gt;true|false&amp;lt;/debuggable&amp;gt;

            &amp;lt;supports-screens&amp;gt;
              &amp;lt;anyDensity&amp;gt;true&amp;lt;/anyDensity&amp;gt;
              &amp;lt;xlargeScreens&amp;gt;false&amp;lt;/xlargeScreens&amp;gt;
            &amp;lt;/supports-screens&amp;gt;

            &amp;lt;compatible-screens&amp;gt;
              &amp;lt;compatible-screen&amp;gt;
                &amp;lt;screenSize&amp;gt;small&amp;lt;/screenSize&amp;gt;
                &amp;lt;screenDensity&amp;gt;ldpi&amp;lt;/screenDensity&amp;gt;
              &amp;lt;/compatible-screen&amp;gt;
            &amp;lt;/compatible-screens&amp;gt;
          &amp;lt;/manifest&amp;gt;
        &amp;lt;/configuration&amp;gt;
      &amp;lt;/execution&amp;gt;
    &amp;lt;/executions&amp;gt;
  &amp;lt;/plugin&amp;gt;
&lt;/pre&gt;

or use properties set in the pom or settings file or supplied as command line parameter. Add
&quot;android.&quot; in front of the property name for command line usage. All parameters follow a
manifest.* naming convention.</description>
        </parameter>
        <parameter>
          <name>manifestApplicationIcon</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Update the &lt;code&gt;android:icon&lt;/code&gt; attribute with the specified parameter. Exposed via
the project property &lt;code&gt;android.manifest.appIcon&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestApplicationLabel</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Update the &lt;code&gt;android:label&lt;/code&gt; attribute with the specified parameter. Exposed via
the project property &lt;code&gt;android.manifest.appLabel&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestApplicationTheme</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Update the &lt;code&gt;android:theme&lt;/code&gt; attribute with the specified parameter. Exposed via
the project property &lt;code&gt;android.manifest.applicationTheme&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestDebuggable</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Update the &lt;code&gt;android:debuggable&lt;/code&gt; attribute with the specified parameter. Exposed via
the project property &lt;code&gt;android.manifest.debuggable&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestProviderAuthorities</name>
          <type>java.util.Properties</type>
          <required>false</required>
          <editable>true</editable>
          <description>For a given provider (named by &lt;code&gt;android:name&lt;/code&gt; update the &lt;code&gt;android:authorities&lt;/code&gt;
attribute for the provider. Exposed via the project property &lt;code&gt;android.manifest.providerAuthorities&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestSharedUserId</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Update the &lt;code&gt;android:sharedUserId&lt;/code&gt; attribute with the specified parameter. If
specified, exposes the project property &lt;code&gt;android.manifest.sharedUserId&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestVersionCode</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Update the &lt;code&gt;android:versionCode&lt;/code&gt; attribute with the specified parameter. Exposed via
the project property &lt;code&gt;android.manifest.versionCode&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestVersionCodeAutoIncrement</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Auto increment the &lt;code&gt;android:versionCode&lt;/code&gt; attribute with each build. The value is
exposed via the project property &lt;code&gt;android.manifest.versionCodeAutoIncrement&lt;/code&gt; and
the resulting value as &lt;code&gt;android.manifest.versionCode&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>manifestVersionCodeUpdateFromVersion</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Update the &lt;code&gt;android:versionCode&lt;/code&gt; attribute automatically from the project version
e.g 3.2.1 will become version code 3002001. As described in this blog post
http://www.simpligility.com/2010/11/release-version-management-for-your-android-application/
but done without using resource filtering. The value is exposed via the project property
property &lt;code&gt;android.manifest.versionCodeUpdateFromVersion&lt;/code&gt; and the resulting value
as &lt;code&gt;android.manifest.versionCode&lt;/code&gt;.
For the purpose of generating the versionCode, if a version element is missing it is presumed to be 0.
The maximum values for the version increment and version minor values are 999,
the version major should be no larger than 2000.  Any other suffixes do not
participate in the version code generation.</description>
        </parameter>
        <parameter>
          <name>manifestVersionName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Update the &lt;code&gt;android:versionName&lt;/code&gt; with the specified parameter. If left empty it
will use the version number of the project. Exposed via the project property
&lt;code&gt;android.manifest.versionName&lt;/code&gt;.</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <manifestApplicationIcon implementation="java.lang.String">${android.manifest.applicationIcon}</manifestApplicationIcon>
        <manifestApplicationLabel implementation="java.lang.String">${android.manifest.applicationLabel}</manifestApplicationLabel>
        <manifestApplicationTheme implementation="java.lang.String">${android.manifest.applicationTheme}</manifestApplicationTheme>
        <manifestDebuggable implementation="java.lang.Boolean">${android.manifest.debuggable}</manifestDebuggable>
        <manifestProviderAuthorities implementation="java.util.Properties">${android.manifest.providerAuthorities}</manifestProviderAuthorities>
        <manifestSharedUserId implementation="java.lang.String">${android.manifest.sharedUserId}</manifestSharedUserId>
        <manifestVersionCode implementation="java.lang.Integer">${android.manifest.versionCode}</manifestVersionCode>
        <manifestVersionCodeAutoIncrement implementation="java.lang.Boolean" default-value="false">${android.manifest.versionCodeAutoIncrement}</manifestVersionCodeAutoIncrement>
        <manifestVersionCodeUpdateFromVersion implementation="java.lang.Boolean" default-value="false">${android.manifest.versionCodeUpdateFromVersion}</manifestVersionCodeUpdateFromVersion>
        <manifestVersionName implementation="java.lang.String" default-value="${project.version}">${android.manifest.versionName}</manifestVersionName>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>monkey</goal>
      <description>Can execute tests using UI/Application Exerciser Monkey.&lt;br&gt;
Implements parsing parameters from pom or command line arguments and sets useful defaults as well. This goal will
invoke Android Monkey exerciser. If the application crashes during the exercise, this goal can fail the build. &lt;br&gt;
A typical usage of this goal can be found at &lt;a
href=&quot;https://github.com/stephanenicolas/Quality-Tools-for-Android&quot;&gt;Quality tools for Android project&lt;/a&gt;.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.MonkeyMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>mavenIgnoreTestFailure</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.failure.ignore is commonly used with Maven to prevent failure of build when (some) tests fail. We
honor it too.</description>
        </parameter>
        <parameter>
          <name>mavenSkipTests</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-DskipTests is commonly used with Maven to skip tests. We honor it too.</description>
        </parameter>
        <parameter>
          <name>mavenTestFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.failure.ignore is commonly used with Maven to prevent failure of build when (some) tests fail. We
honor it too.</description>
        </parameter>
        <parameter>
          <name>mavenTestSkip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.skip is commonly used with Maven to skip tests. We honor it.</description>
        </parameter>
        <parameter>
          <name>monkey</name>
          <type>com.simpligility.maven.plugins.android.configuration.Monkey</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configuration for the ui automator goal. As soon as a lint goal is invoked the command will be executed
unless the skip parameter is set. A minimal configuration that will run lint and produce a XML report in
${project.build.directory}/lint/lint-results.xml is

&lt;pre&gt;
&amp;lt;monkey&amp;gt;
  &amp;lt;skip&amp;gt;false&amp;lt;/skip&amp;gt;
&amp;lt;/monkey&amp;gt;
&lt;/pre&gt;

Full configuration can use these parameters.

&lt;pre&gt;
 &amp;lt;monkey&amp;gt;
   &amp;lt;skip&amp;gt;false&amp;lt;/skip&amp;gt;
   &amp;lt;eventCount&amp;gt;5000&amp;lt;/eventCount&amp;gt;
   &amp;lt;seed&amp;gt;123456&amp;lt;/seed&amp;gt;
   &amp;lt;throttle&amp;gt;10&amp;lt;/throttle&amp;gt;
   &amp;lt;percentTouch&amp;gt;10&amp;lt;/percentTouch&amp;gt;
   &amp;lt;percentMotion&amp;gt;10&amp;lt;/percentMotion&amp;gt;
   &amp;lt;percentTrackball&amp;gt;10&amp;lt;/percentTrackball&amp;gt;
   &amp;lt;percentNav&amp;gt;10&amp;lt;/percentNav&amp;gt;
   &amp;lt;percentMajorNav&amp;gt;10&amp;lt;/percentMajorNav&amp;gt;
   &amp;lt;percentSyskeys&amp;gt;10&amp;lt;/percentSyskeys&amp;gt;
   &amp;lt;percentAppswitch&amp;gt;10&amp;lt;/percentAppswitch&amp;gt;
   &amp;lt;percentAnyevent&amp;gt;10&amp;lt;/percentAnyevent&amp;gt;
   &amp;lt;packages&amp;gt;
       &amp;lt;package&amp;gt;com.foo&amp;lt;/package&amp;gt;
       &amp;lt;package&amp;gt;com.bar&amp;lt;/package&amp;gt;
   &amp;lt;/packages&amp;gt;
   &amp;lt;categories&amp;gt;
       &amp;lt;category&amp;gt;foo&amp;lt;/category&amp;gt;
       &amp;lt;category&amp;gt;bar&amp;lt;/category&amp;gt;
   &amp;lt;/categories&amp;gt;
   &amp;lt;debugNoEvents&amp;gt;true&amp;lt;/debugNoEvents&amp;gt;
   &amp;lt;hprof&amp;gt;true&amp;lt;/hprof&amp;gt;
   &amp;lt;ignoreCrashes&amp;gt;true&amp;lt;/ignoreCrashes&amp;gt;
   &amp;lt;ignoreTimeouts&amp;gt;true&amp;lt;/ignoreTimeouts&amp;gt;
   &amp;lt;ignoreSecurityExceptions&amp;gt;true&amp;lt;/ignoreSecurityExceptions&amp;gt;
   &amp;lt;killProcessAfterError&amp;gt;true&amp;lt;/killProcessAfterError&amp;gt;
   &amp;lt;monitorNativeCrashes&amp;gt;true&amp;lt;/monitorNativeCrashes&amp;gt;
   &amp;lt;createReport&amp;gt;true&amp;lt;/createReport&amp;gt;
 &amp;lt;/monkey&amp;gt;
&lt;/pre&gt;

Alternatively to the plugin configuration values can also be configured as properties on the command line as
android.lint.* or in pom or settings file as properties like lint*.</description>
        </parameter>
        <parameter>
          <name>monkeyCategories</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>If you specify one or more categories this way, the Monkey will only allow the system to visit activities that
are listed with one of the specified categories. If you don&apos;t specify any categories, the Monkey will select
activities listed with the category Intent.CATEGORY_LAUNCHER or Intent.CATEGORY_MONKEY.</description>
        </parameter>
        <parameter>
          <name>monkeyCreateReport</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Create a junit xml format compatible output file containing the test results for each device the instrumentation
tests run on. &lt;br&gt;
&lt;br&gt;
The files are stored in target/surefire-reports and named TEST-deviceid.xml. The deviceid for an emulator is
deviceSerialNumber_avdName_manufacturer_model. The serial number is commonly emulator-5554 for the first emulator
started with numbers increasing. avdName is as defined in the SDK tool. The manufacturer is typically &quot;unknown&quot;
and the model is typically &quot;sdk&quot;.&lt;br&gt;
The deviceid for an actual devices is deviceSerialNumber_manufacturer_model. &lt;br&gt;
&lt;br&gt;
The file contains system properties from the system running the Android Maven Plugin (JVM) and device properties
from the device/emulator the tests are running on. &lt;br&gt;
&lt;br&gt;
The file contains a single TestSuite for all tests and a TestCase for each test method. Errors and failures are
logged in the file and the system log with full stack traces and other details available.

Defaults to false.</description>
        </parameter>
        <parameter>
          <name>monkeyDebugNoEvents</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>When specified, the Monkey will perform the initial launch into a test activity, but will not generate any
further events. For best results, combine with -v, one or more package constraints, and a non-zero throttle to
keep the Monkey running for 30 seconds or more. This provides an environment in which you can monitor package
transitions invoked by your application.</description>
        </parameter>
        <parameter>
          <name>monkeyEventCount</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Number of generated events. Defaults to 1000.</description>
        </parameter>
        <parameter>
          <name>monkeyHprof</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set, this option will generate profiling reports immediately before and after the Monkey event sequence. This
will generate large (~5Mb) files in data/misc, so use with care. See Traceview for more information on trace
files.</description>
        </parameter>
        <parameter>
          <name>monkeyIgnoreCrashes</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Normally, the Monkey will stop when the application crashes or experiences any type of unhandled exception. If
you specify this option, the Monkey will continue to send events to the system, until the count is completed.
Settings this option is different to setting testFailureIgnore or maven.test.failure.ignore to true, it will
impact monkey run but not the result of the maven build.</description>
        </parameter>
        <parameter>
          <name>monkeyIgnoreSecurityExceptions</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Normally, the Monkey will stop when the application experiences any type of permissions error, for example if it
attempts to launch an activity that requires certain permissions. If you specify this option, the Monkey will
continue to send events to the system, until the count is completed. *

Defaults to false.</description>
        </parameter>
        <parameter>
          <name>monkeyIgnoreTimeouts</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Normally, the Monkey will stop when the application experiences any type of timeout error such as a
&quot;Application Not Responding&quot; dialog. If you specify this option, the Monkey will continue to send events to the
system, until the count is completed.

Defaults to false.</description>
        </parameter>
        <parameter>
          <name>monkeyKillProcessAfterError</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Normally, when the Monkey stops due to an error, the application that failed will be left running. When this
option is set, it will signal the system to stop the process in which the error occurred. Note, under a normal
(successful) completion, the launched process(es) are not stopped, and the device is simply left in the last
state after the final event.

Defaults to false.</description>
        </parameter>
        <parameter>
          <name>monkeyMonitorNativeCrashes</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Watches for and reports crashes occurring in the Android system native code. If --kill-process-after-error is
set, the system will stop.

Defaults to false.</description>
        </parameter>
        <parameter>
          <name>monkeyPackages</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>If you specify one or more packages this way, the Monkey will only allow the system to visit activities within
those packages. If your application requires access to activities in other packages (e.g. to select a contact)
you&apos;ll need to specify those packages as well. If you don&apos;t specify any packages, the Monkey will allow the
system to launch activities in all packages.</description>
        </parameter>
        <parameter>
          <name>monkeyPercentAnyEvent</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Adjust percentage of other types of events. This is a catch-all for all other types of events such as keypresses,
other less-used buttons on the device, and so forth.</description>
        </parameter>
        <parameter>
          <name>monkeyPercentAppswitch</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Adjust percentage of activity launches. At random intervals, the Monkey will issue a startActivity() call, as a
way of maximizing coverage of all activities within your package.</description>
        </parameter>
        <parameter>
          <name>monkeyPercentMajorNav</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Adjust percentage of &quot;major&quot; navigation events. (These are navigation events that will typically cause actions
within your UI, such as the center button in a 5-way pad, the back key, or the menu key.)</description>
        </parameter>
        <parameter>
          <name>monkeyPercentMotion</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Adjust percentage of motion events. (Motion events consist of a down event somewhere on the screen, a series of
pseudo-random movements, and an up event.)</description>
        </parameter>
        <parameter>
          <name>monkeyPercentNav</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Adjust percentage of &quot;basic&quot; navigation events. (Navigation events consist of up/down/left/right, as input from a
directional input device.)</description>
        </parameter>
        <parameter>
          <name>monkeyPercentSyskeys</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Adjust percentage of &quot;system&quot; key events. (These are keys that are generally reserved for use by the system, such
as Home, Back, Start Call, End Call, or Volume controls.) Defaults to null.</description>
        </parameter>
        <parameter>
          <name>monkeyPercentTouch</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Adjust percentage of touch events. (Touch events are a down-up event in a single place on the screen.)</description>
        </parameter>
        <parameter>
          <name>monkeyPercentTrackball</name>
          <type>java.lang.Integer</type>
          <required>false</required>
          <editable>true</editable>
          <description>Adjust percentage of trackball events. (Trackball events consist of one or more random movements, sometimes
followed by a click.)</description>
        </parameter>
        <parameter>
          <name>monkeySeed</name>
          <type>java.lang.Long</type>
          <required>false</required>
          <editable>true</editable>
          <description>Seed value for pseudo-random number generator. If you re-run the Monkey with the same seed value, it will
generate the same sequence of events.</description>
        </parameter>
        <parameter>
          <name>monkeySkip</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables or disables monkey test goal. If &lt;code&gt;true&lt;/code&gt; it will be skipped; if &lt;code&gt;false&lt;/code&gt;, it will be
run. Defaults to true.</description>
        </parameter>
        <parameter>
          <name>monkeyThrottle</name>
          <type>java.lang.Long</type>
          <required>false</required>
          <editable>true</editable>
          <description>Inserts a fixed delay between events. You can use this option to slow down the Monkey. If not specified, there is
no delay and the events are generated as rapidly as possible.</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <mavenIgnoreTestFailure implementation="boolean" default-value="false">${testFailureIgnore}</mavenIgnoreTestFailure>
        <mavenSkipTests implementation="boolean" default-value="false">${skipTests}</mavenSkipTests>
        <mavenTestFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</mavenTestFailureIgnore>
        <mavenTestSkip implementation="boolean" default-value="false">${maven.test.skip}</mavenTestSkip>
        <monkeyCategories implementation="java.lang.String[]">${android.monkey.categories}</monkeyCategories>
        <monkeyCreateReport implementation="java.lang.Boolean">${android.monkey.createReport}</monkeyCreateReport>
        <monkeyDebugNoEvents implementation="java.lang.Boolean">${android.monkey.debugNoEvents}</monkeyDebugNoEvents>
        <monkeyEventCount implementation="java.lang.Integer">${android.monkey.eventCount}</monkeyEventCount>
        <monkeyHprof implementation="java.lang.Boolean">${android.monkey.Hprof}</monkeyHprof>
        <monkeyIgnoreCrashes implementation="java.lang.Boolean">${android.monkey.ignoreCrashes}</monkeyIgnoreCrashes>
        <monkeyIgnoreSecurityExceptions implementation="java.lang.Boolean">${android.monkey.IgnoreSecurityExceptions}</monkeyIgnoreSecurityExceptions>
        <monkeyIgnoreTimeouts implementation="java.lang.Boolean">${android.monkey.IgnoreTimeouts}</monkeyIgnoreTimeouts>
        <monkeyKillProcessAfterError implementation="java.lang.Boolean">${android.monkey.KillProcessAfterError}</monkeyKillProcessAfterError>
        <monkeyMonitorNativeCrashes implementation="java.lang.Boolean">${android.monkey.MonitorNativeCrashes}</monkeyMonitorNativeCrashes>
        <monkeyPackages implementation="java.lang.String[]">${android.monkey.packages}</monkeyPackages>
        <monkeyPercentAnyEvent implementation="java.lang.Integer">${android.monkey.percentAnyevent}</monkeyPercentAnyEvent>
        <monkeyPercentAppswitch implementation="java.lang.Integer">${android.monkey.percentAppswitch}</monkeyPercentAppswitch>
        <monkeyPercentMajorNav implementation="java.lang.Integer">${android.monkey.percentMajorNav}</monkeyPercentMajorNav>
        <monkeyPercentMotion implementation="java.lang.Integer">${android.monkey.percentMotion}</monkeyPercentMotion>
        <monkeyPercentNav implementation="java.lang.Integer">${android.monkey.percentNav}</monkeyPercentNav>
        <monkeyPercentSyskeys implementation="java.lang.Integer">${android.monkey.percentSyskeys}</monkeyPercentSyskeys>
        <monkeyPercentTouch implementation="java.lang.Integer">${android.monkey.percentTouch}</monkeyPercentTouch>
        <monkeyPercentTrackball implementation="java.lang.Integer">${android.monkey.percentTrackball}</monkeyPercentTrackball>
        <monkeySeed implementation="java.lang.Long">${android.monkey.seed}</monkeySeed>
        <monkeySkip implementation="java.lang.Boolean">${android.monkey.skip}</monkeySkip>
        <monkeyThrottle implementation="java.lang.Long">${android.monkey.throttle}</monkeyThrottle>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>monkeyrunner</goal>
      <description>Can execute monkey runner programs.&lt;br&gt;
Implements parsing parameters from pom or command line arguments and sets useful defaults as well. This goal will
invoke monkey runner scripts. If the application crashes during the exercise, this goal can fail the build. &lt;br&gt;
A typical usage of this goal can be found at &lt;a
href=&quot;https://github.com/stephanenicolas/Quality-Tools-for-Android&quot;&gt;Quality tools for Android project&lt;/a&gt;.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.MonkeyRunnerMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>mavenIgnoreTestFailure</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.failure.ignore is commonly used with Maven to prevent failure of build when (some) tests fail. We
honor it too.</description>
        </parameter>
        <parameter>
          <name>mavenSkipTests</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-DskipTests is commonly used with Maven to skip tests. We honor it too.</description>
        </parameter>
        <parameter>
          <name>mavenTestFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.failure.ignore is commonly used with Maven to prevent failure of build when (some) tests fail. We
honor it too.</description>
        </parameter>
        <parameter>
          <name>mavenTestSkip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.skip is commonly used with Maven to skip tests. We honor it.</description>
        </parameter>
        <parameter>
          <name>monkeyCreateReport</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Create a junit xml format compatible output file containing the test results for each device the instrumentation
tests run on. &lt;br&gt;
&lt;br&gt;
The files are stored in target/surefire-reports and named TEST-deviceid.xml. The deviceid for an emulator is
deviceSerialNumber_avdName_manufacturer_model. The serial number is commonly emulator-5554 for the first emulator
started with numbers increasing. avdName is as defined in the SDK tool. The manufacturer is typically &quot;unknown&quot;
and the model is typically &quot;sdk&quot;.&lt;br&gt;
The deviceid for an actual devices is deviceSerialNumber_manufacturer_model. &lt;br&gt;
&lt;br&gt;
The file contains system properties from the system running the Android Maven Plugin (JVM) and device properties
from the device/emulator the tests are running on. &lt;br&gt;
&lt;br&gt;
The file contains a single TestSuite for all tests and a TestCase for each test method. Errors and failures are
logged in the file and the system log with full stack traces and other details available.

Defaults to false.</description>
        </parameter>
        <parameter>
          <name>monkeyInjectDeviceSerialNumberIntoScript</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether or not to inject device serial number as a parameter to each monkey runner script. The parameter
will be the first parameter passed to the script. This parameter allows to support monkey runner tests on
multiple devices. In that case, monkey runner scripts have to be modified to take the new parameter into account.
Follow that &lt;a href=&quot;http://stackoverflow.com/a/13460438/693752&quot;&gt;thread on stack over flow to learn more about
it&lt;/a&gt;.</description>
        </parameter>
        <parameter>
          <name>monkeyPlugins</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>(Optional) Specifies a .jar file containing a plugin for monkeyrunner. To learn more about monkeyrunner plugins,
see &lt;a href=&quot;http://developer.android.com/tools/help/monkeyrunner_concepts.html#Plugins&quot;&gt;Extending monkeyrunner
with plugins&lt;/a&gt;. You can add as many plugins as you want.

Defaults to no plugins.</description>
        </parameter>
        <parameter>
          <name>monkeyRunnerSkip</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables or disables monkey runner test goal. If &lt;code&gt;true&lt;/code&gt; it will be skipped; if &lt;code&gt;false&lt;/code&gt;, it
will be run. Defaults to true.</description>
        </parameter>
        <parameter>
          <name>monkeyrunner</name>
          <type>com.simpligility.maven.plugins.android.configuration.MonkeyRunner</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configuration for the monkey runner goal.

&lt;pre&gt;
&amp;lt;monkeyrunner&amp;gt;
  &amp;lt;skip&amp;gt;false&amp;lt;/skip&amp;gt;
&amp;lt;/monkeyrunner&amp;gt;
&lt;/pre&gt;

Full configuration can use these parameters.

&lt;pre&gt;
 &amp;lt;monkeyrunner&amp;gt;
   &amp;lt;skip&amp;gt;false&amp;lt;/skip&amp;gt;
   &amp;lt;createReport&amp;gt;true&amp;lt;/createReport&amp;gt;
 &amp;lt;/monkeyrunner&amp;gt;
&lt;/pre&gt;

Alternatively to the plugin configuration values can also be configured as properties on the command line as
android.lint.* or in pom or settings file as properties like lint*.</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>parsedPrograms</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>true</editable>
          <description>Runs the contents of the file as a Python program.

&lt;pre&gt;
&amp;lt;programs&amp;gt;
  &amp;lt;program&amp;gt;
    &amp;lt;filename&amp;gt;foo.py&amp;lt;/filename&amp;gt;
    &amp;lt;options&amp;gt;bar&amp;lt;/options&amp;gt;
  &amp;lt;program&amp;gt;
  &amp;lt;program&amp;gt;
    &amp;lt;filename&amp;gt;foo2.py&amp;lt;/filename&amp;gt;
  &amp;lt;program&amp;gt;
  [..]
&amp;lt;/programs&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <mavenIgnoreTestFailure implementation="boolean" default-value="false">${testFailureIgnore}</mavenIgnoreTestFailure>
        <mavenSkipTests implementation="boolean" default-value="false">${skipTests}</mavenSkipTests>
        <mavenTestFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</mavenTestFailureIgnore>
        <mavenTestSkip implementation="boolean" default-value="false">${maven.test.skip}</mavenTestSkip>
        <monkeyCreateReport implementation="java.lang.Boolean">${android.monkeyrunner.createReport}</monkeyCreateReport>
        <monkeyInjectDeviceSerialNumberIntoScript implementation="java.lang.Boolean">${android.monkeyrunner.injectDeviceSerialNumberIntoScript}</monkeyInjectDeviceSerialNumberIntoScript>
        <monkeyPlugins implementation="java.lang.String[]">${android.monkeyrunner.plugins}</monkeyPlugins>
        <monkeyRunnerSkip implementation="java.lang.Boolean">${android.monkeyrunner.skip}</monkeyRunnerSkip>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>proguard</goal>
      <description>Processes both application and dependency classes using the ProGuard byte code obfuscator,
minimzer, and optimizer. For more information, see https://proguard.sourceforge.net.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <phase>process-classes</phase>
      <implementation>com.simpligility.maven.plugins.android.phase04processclasses.ProguardMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>artifactSet</name>
          <type>com.simpligility.maven.plugins.android.IncludeExcludeSet</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to include or exclude artifacts by {@code groupId}, {@code artifactId}, and {@code versionId}. The
{@code include} parameter has higher priority than the {@code exclude} parameter. These two parameters can
override the {@code artifactTypeSet} and {@code skipDependencies} parameters. Artifact {@code groupId},
{@code artifactId}, and {@code versionId} are specified by a string with the respective values separated using
a colon character {@code :}. {@code artifactId} and {@code versionId} can be optional covering an artifact
range. Empty strings are ignored. Example:
&lt;pre&gt;
    &amp;lt;artifactTypeSet&amp;gt;
        &amp;lt;includes&amp;gt;
            &amp;lt;include&amp;gt;foo-group:foo-artifact:1.0-SNAPSHOT&amp;lt;/include&amp;gt;
            &amp;lt;include&amp;gt;bar-group:bar-artifact:1.0-SNAPSHOT&amp;lt;/include&amp;gt;
            &amp;lt;include&amp;gt;baz-group:*&amp;lt;/include&amp;gt;
        &amp;lt;includes&amp;gt;
        &amp;lt;excludes&amp;gt;
            &amp;lt;exclude&amp;gt;qux-group:qux-artifact:*&amp;lt;/exclude&amp;gt;
        &amp;lt;excludes&amp;gt;
    &amp;lt;/artifactTypeSet&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>artifactTypeSet</name>
          <type>com.simpligility.maven.plugins.android.IncludeExcludeSet</type>
          <required>false</required>
          <editable>true</editable>
          <description>Allows to include or exclude artifacts by type. The {@code include} parameter has higher priority than the
{@code exclude} parameter. These two parameters can be overridden by the {@code artifactSet} parameter. Empty
strings are ignored. Example:
&lt;pre&gt;
    &amp;lt;artifactTypeSet&amp;gt;
        &amp;lt;includes&amp;gt;
            &amp;lt;include&amp;gt;aar&amp;lt;/include&amp;gt;
        &amp;lt;includes&amp;gt;
        &amp;lt;excludes&amp;gt;
            &amp;lt;exclude&amp;gt;jar&amp;lt;/exclude&amp;gt;
        &amp;lt;excludes&amp;gt;
    &amp;lt;/artifactTypeSet&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachMap</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true the mapping.txt file will be attached as artifact of type &lt;code&gt;map&lt;/code&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeJdkLibs</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true JDK jars will be included as library jars and corresponding filters
will be applied to android.jar.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>obfuscatedJar</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>outputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path relative to the project&apos;s build directory (target) where proguard puts folowing files:

&lt;ul&gt;
  &lt;li&gt;dump.txt&lt;/li&gt;
  &lt;li&gt;seeds.txt&lt;/li&gt;
  &lt;li&gt;usage.txt&lt;/li&gt;
  &lt;li&gt;mapping.txt&lt;/li&gt;
&lt;/ul&gt;

You can define the directory like this:
&lt;pre&gt;
&amp;lt;proguard&amp;gt;
  &amp;lt;skip&amp;gt;false&amp;lt;/skip&amp;gt;
  &amp;lt;config&amp;gt;proguard.cfg&amp;lt;/config&amp;gt;
  &amp;lt;outputDirectory&amp;gt;my_proguard&amp;lt;/outputDirectory&amp;gt;
&amp;lt;/proguard&amp;gt;
&lt;/pre&gt;

Output directory is defined relatively so it could be also outside of the target directory.</description>
        </parameter>
        <parameter>
          <name>pluginDependencies</name>
          <type>java.util.List</type>
          <required>true</required>
          <editable>false</editable>
          <description>The plugin dependencies.</description>
        </parameter>
        <parameter>
          <name>proguard</name>
          <type>com.simpligility.maven.plugins.android.configuration.Proguard</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;
ProGuard configuration. ProGuard is disabled by default. Set the skip parameter to false to activate proguard.
A complete configuration can include any of the following:
&lt;/p&gt;

&lt;pre&gt;
&amp;lt;proguard&amp;gt;
   &amp;lt;skip&amp;gt;true|false&amp;lt;/skip&amp;gt;
   &amp;lt;config&amp;gt;proguard.cfg&amp;lt;/config&amp;gt;
   &amp;lt;configs&amp;gt;
     &amp;lt;config&amp;gt;${env.ANDROID_HOME}/tools/proguard/proguard-android.txt&amp;lt;/config&amp;gt;
   &amp;lt;/configs&amp;gt;
   &amp;lt;proguardJarPath&amp;gt;someAbsolutePathToProguardJar&amp;lt;/proguardJarPath&amp;gt;
   &amp;lt;filterMavenDescriptor&amp;gt;true|false&amp;lt;/filterMavenDescriptor&amp;gt;
   &amp;lt;filterManifest&amp;gt;true|false&amp;lt;/filterManifest&amp;gt;
   &amp;lt;customFilter&amp;gt;filter1,filter2&amp;lt;/customFilter&amp;gt;
   &amp;lt;jvmArguments&amp;gt;
    &amp;lt;jvmArgument&amp;gt;-Xms256m&amp;lt;/jvmArgument&amp;gt;
    &amp;lt;jvmArgument&amp;gt;-Xmx512m&amp;lt;/jvmArgument&amp;gt;
  &amp;lt;/jvmArguments&amp;gt;
&amp;lt;/proguard&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
A good practice is to create a release profile in your POM, in which you enable ProGuard.
ProGuard should be disabled for development builds, since it obfuscates class and field
names, and it may interfere with test projects that rely on your application classes.
All parameters can be overridden in profiles or the the proguard* properties. Default values apply and are
documented with these properties.
&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardCustomFilter</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>You can specify a custom filter which will be used to filter out unnecessary files from ProGuard input.</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>proguardFilterManifest</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true will add a filter to remove META-INF/MANIFEST.MF files.  Defaults to false.</description>
        </parameter>
        <parameter>
          <name>proguardFilterMavenDescriptor</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>If set to true will add a filter to remove META-INF/maven/* files. Defaults to false.</description>
        </parameter>
        <parameter>
          <name>proguardJvmArguments</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Extra JVM Arguments. Using these you can e.g. increase memory for the jvm running the build.
Defaults to &quot;-Xmx512M&quot;.</description>
        </parameter>
        <parameter>
          <name>proguardOptions</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Additional ProGuard options</description>
        </parameter>
        <parameter>
          <name>proguardProguardJarPath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to the proguard jar and therefore version of proguard to be used. By default this will use Proguard
from the Central Repository. Overriding it with an absolute path allows you to use a newer or custom proguard
version..

You can also reference an external Proguard version as a plugin dependency like this:
&lt;pre&gt;
&amp;lt;plugin&amp;gt;
  &amp;lt;groupId&amp;gt;com.jayway.maven.plugins.android.generation2&amp;lt;/groupId&amp;gt;
  &amp;lt;artifactId&amp;gt;android-maven-plugin&amp;lt;/artifactId&amp;gt;
    &amp;lt;dependencies&amp;gt;
      &amp;lt;dependency&amp;gt;
        &amp;lt;groupId&amp;gt;net.sf.proguard&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;proguard-base&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;4.7&amp;lt;/version&amp;gt;
      &amp;lt;/dependency&amp;gt;
    &amp;lt;/dependencies&amp;gt;
&lt;/pre&gt;

which will download and use Proguard 4.7 as deployed to the Central Repository.</description>
        </parameter>
        <parameter>
          <name>proguardSkip</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether ProGuard is enabled or not. Defaults to true.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>skipDependencies</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skips transitive dependencies. May be useful if the target classes directory is populated with the
{@code maven-dependency-plugin} and already contains all dependency classes.</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <artifactSet implementation="com.simpligility.maven.plugins.android.IncludeExcludeSet">${artifactSet}</artifactSet>
        <artifactTypeSet implementation="com.simpligility.maven.plugins.android.IncludeExcludeSet">${artifactTypeSet}</artifactTypeSet>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachMap implementation="java.lang.Boolean">${android.proguard.attachMap}</attachMap>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeJdkLibs implementation="java.lang.Boolean">${android.proguard.includeJdkLibs}</includeJdkLibs>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <obfuscatedJar implementation="java.lang.String" default-value="${project.build.directory}/${project.build.finalName}_obfuscated.jar">${android.proguard.obfuscatedJar}</obfuscatedJar>
        <outputDirectory implementation="java.io.File">${android.proguard.outputDirectory}</outputDirectory>
        <pluginDependencies implementation="java.util.List" default-value="${plugin.artifacts}"/>
        <proguardCustomFilter implementation="java.lang.String">${android.proguard.customfilter}</proguardCustomFilter>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <proguardFilterManifest implementation="java.lang.Boolean">${android.proguard.filterManifest}</proguardFilterManifest>
        <proguardFilterMavenDescriptor implementation="java.lang.Boolean">${android.proguard.filterMavenDescriptor}</proguardFilterMavenDescriptor>
        <proguardJvmArguments implementation="java.lang.String[]">${android.proguard.jvmArguments}</proguardJvmArguments>
        <proguardOptions implementation="java.lang.String[]">${android.proguard.options}</proguardOptions>
        <proguardProguardJarPath implementation="java.lang.String">${android.proguard.proguardJarPath}</proguardProguardJarPath>
        <proguardSkip implementation="java.lang.Boolean">${android.proguard.skip}</proguardSkip>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <skipDependencies implementation="boolean" default-value="false">${skipDependencies}</skipDependencies>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>publish-apk</goal>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.PublishApkMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>apkFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>fileNameWhatsnew</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>listingDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>p12File</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>publisherEmail</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>track</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <apkFile implementation="java.io.File">${android.publisher.apkpath}</apkFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <fileNameWhatsnew implementation="java.lang.String" default-value="whatsnew.txt">${android.publisher.filename.whatsnew}</fileNameWhatsnew>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <listingDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/play/">${android.publisher.listing.directory}</listingDirectory>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <p12File implementation="java.io.File">${android.publisher.google.p12}</p12File>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectName implementation="java.lang.String">${android.publisher.project.name}</projectName>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <publisherEmail implementation="java.lang.String">${android.publisher.google.email}</publisherEmail>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <track implementation="java.lang.String" default-value="alpha">${android.publisher.track}</track>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>publish-listing</goal>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.PublishListingMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>fileNameFullDescription</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>fileNameShortDescription</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>fileNameTitle</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>listingDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>p12File</name>
          <type>java.io.File</type>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>packageName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>publisherEmail</name>
          <type>java.lang.String</type>
          <required>true</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>uploadImages</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <fileNameFullDescription implementation="java.lang.String" default-value="fulldescription.txt">${android.publisher.filename.full.description}</fileNameFullDescription>
        <fileNameShortDescription implementation="java.lang.String" default-value="shortdescription.txt">${android.publisher.filename.short.description}</fileNameShortDescription>
        <fileNameTitle implementation="java.lang.String" default-value="title.txt">${android.publisher.filename.title}</fileNameTitle>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <listingDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/play/">${android.publisher.listing.directory}</listingDirectory>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <p12File implementation="java.io.File">${android.publisher.google.p12}</p12File>
        <packageName implementation="java.lang.String">${android.publisher.package.name}</packageName>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectName implementation="java.lang.String">${android.publisher.project.name}</projectName>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <publisherEmail implementation="java.lang.String">${android.publisher.google.email}</publisherEmail>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <uploadImages implementation="boolean" default-value="false">${android.publisher.upload.images}</uploadImages>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>pull</goal>
      <description>Copy file or directory from all the attached (or specified)
devices/emulators.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.PullMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>pull</name>
          <type>com.simpligility.maven.plugins.android.configuration.Pull</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The configuration for the pull goal can be set up in the plugin configuration in the pom file as:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;pull&amp;gt;
    &amp;lt;source&amp;gt;path&amp;lt;/source&amp;gt;
    &amp;lt;destination&amp;gt;path&amp;lt;/destination&amp;gt;
&amp;lt;/pull&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The parameters can also be configured as property in the pom or settings file
&lt;pre&gt;
&amp;lt;properties&amp;gt;
    &amp;lt;android.pull.source&amp;gt;pathondevice&amp;lt;/android.pull.source&amp;gt;
    &amp;lt;android.pull.destination&amp;gt;path&amp;lt;/android.pull.destination&amp;gt;
&amp;lt;/properties&amp;gt;
&lt;/pre&gt;
or from command-line with parameter &lt;code&gt;-Dandroid.pull.source=path&lt;/code&gt;
and &lt;code&gt;-Dandroid.pull.destination=path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>pullDestination</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The path of the destination to copy the file to.

If destination ends with {@link File#separator}, it is supposed to be a
directory. Therefore the source - whether it refers to a file or
directory - will be copied into the destination directory.

If destination does not end with {@link File#separator}, the last path
segment will be assumed as the new file or directory name (depending on
the type of source).

Any missing directories will be created.</description>
        </parameter>
        <parameter>
          <name>pullSource</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The path of the source file or directory on the emulator/device.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <pullDestination implementation="java.lang.String">${android.pull.destination}</pullDestination>
        <pullSource implementation="java.lang.String">${android.pull.source}</pullSource>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>push</goal>
      <description>Copy file to all the attached (or specified) devices/emulators.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.PushMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>push</name>
          <type>com.simpligility.maven.plugins.android.configuration.Push</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The configuration for the push goal can be set up in the plugin configuration in the pom file as:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;push&amp;gt;
    &amp;lt;source&amp;gt;path&amp;lt;/source&amp;gt;
    &amp;lt;destination&amp;gt;path&amp;lt;/destination&amp;gt;
&amp;lt;/push&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The parameters can also be configured as property in the pom or settings file
&lt;pre&gt;
&amp;lt;properties&amp;gt;
    &amp;lt;android.push.source&amp;gt;pathondevice&amp;lt;/android.push.source&amp;gt;
    &amp;lt;android.push.destination&amp;gt;path&amp;lt;/android.push.destination&amp;gt;
&amp;lt;/properties&amp;gt;
&lt;/pre&gt;
or from command-line with parameter
&lt;code&gt;-Dandroid.push.source=path&lt;/code&gt;
and
&lt;code&gt;-Dandroid.push.destination=path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>pushDestination</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The destination file name as absolute path on the emulator or device.
If the last character is a &quot;/&quot; it will be assumed that the original
base filename should be preserved and a target directory is specified.
This works analogous if the source is a directory.</description>
        </parameter>
        <parameter>
          <name>pushSource</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The file name of the local filesystem file to push to the emulator or
device either as absolute path or relative to the execution folder.

If you specify a directory, all containing files will be pushed recursively.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <pushDestination implementation="java.lang.String">${android.push.destination}</pushDestination>
        <pushSource implementation="java.lang.String">${android.push.source}</pushSource>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>redeploy</goal>
      <description>Undeploys and the deploys (= redeploys) the apk(s) of the current project(s) to all
attached devices and emulators. Automatically skips other projects in a multi-module
build that do not use packaging apk without terminating.&lt;br&gt;</description>
      <requiresDependencyResolution>runtime</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.RedeployMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>redeploy-apk</goal>
      <description>Reploys a specified Android application apk to attached devices and emulators. 
By default it will deploy to all, but a asubset or single one can be configured 
with the device and devices parameters. This simply tries to undeploy the APK 
first and then deploy it again. This goal can be used in non-android projects and 
as standalone execution on the command line.&lt;br&gt;</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.RedeployApkMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>deployapk</name>
          <type>com.simpligility.maven.plugins.android.configuration.DeployApk</type>
          <required>false</required>
          <editable>true</editable>
          <description>Configuration for apk file redeployment within a pom file. See {@link #deployapkFilename}. 

&lt;pre&gt;
&amp;lt;deployapk&amp;gt;
   &amp;lt;filename&amp;gt;yourapk.apke&amp;lt;/filename&amp;gt;
&amp;lt;/deployapk&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>deployapkFilename</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <deployapkFilename implementation="java.io.File">${android.deployapk.filename}</deployapkFilename>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>run</goal>
      <description>Runs the first Activity shown in the top-level launcher as determined by its Intent filters.
&lt;p&gt;
Android provides a component-based architecture, which means that there is no &quot;main&quot; function which serves as an
entry point to the APK. There&apos;s an homogeneous collection of Activity(es), Service(s), Receiver(s), etc.
&lt;/p&gt;
&lt;p&gt;
The Android top-level launcher (whose purpose is to allow users to launch other applications) uses the Intent
resolution mechanism to determine which Activity(es) to show to the end user. Such activities are identified by at
least:
&lt;ul&gt;
&lt;li&gt;Action type: &lt;code&gt;android.intent.action.MAIN&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Category: &lt;code&gt;android.intent.category.LAUNCHER&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;And are declared in &lt;code&gt;AndroidManifest.xml&lt;/code&gt; as such:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;activity android:name=&quot;.ExampleActivity&quot;&amp;gt;
    &amp;lt;intent-filter&amp;gt;
        &amp;lt;action android:name=&quot;android.intent.action.MAIN&quot; /&amp;gt;
        &amp;lt;category android:name=&quot;android.intent.category.LAUNCHER&quot; /&amp;gt;
    &amp;lt;/intent-filter&amp;gt;
&amp;lt;/activity&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
This {@link Mojo} will try to to launch the first activity of this kind found in &lt;code&gt;AndroidManifest.xml&lt;/code&gt;. In
case multiple activities satisfy the requirements listed above only the first declared one is run. In case there are
no &quot;Launcher activities&quot; declared in the manifest or no activities declared at all, this goal aborts throwing an
error.
&lt;/p&gt;
&lt;p&gt;
The device parameter is taken into consideration so potentially the Activity found is started on all attached
devices. The application will NOT be deployed and running will silently fail if the application is not deployed.
&lt;/p&gt;</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.RunMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>run</name>
          <type>com.simpligility.maven.plugins.android.configuration.Run</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The configuration for the run goal can be set up in the plugin configuration in the pom file as:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;run&amp;gt;
    &amp;lt;debug&amp;gt;true|false|portnumber&amp;lt;/debug&amp;gt;
&amp;lt;/run&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;debug&amp;gt;&lt;/code&gt; parameter is optional and defaults to false. Numeric values like 5432 are 
parsed as port number. 
&lt;p&gt;The debug parameter can also be configured as property in the pom or settings file
&lt;pre&gt;
&amp;lt;properties&amp;gt;
    &amp;lt;android.run.debug&amp;gt;true&amp;lt;/android.run.debug&amp;gt;
&amp;lt;/properties&amp;gt;
&lt;/pre&gt;
or from command-line with parameter &lt;code&gt;-Dandroid.run.debug=true&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>runDebug</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Debug parameter for the the run goal. If true, the device or emulator will pause execution of the process at
startup to wait for a debugger to connect. Also see the &quot;run&quot; parameter documentation. Default value is false.
If the value is numeric, it is treated as a port number to forward the JDWP protocol
of the launched process to.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <runDebug implementation="java.lang.String">${android.run.debug}</runDebug>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>uiautomator</goal>
      <description>Can execute tests using ui uiautomator.&lt;br&gt;
Implements parsing parameters from pom or command line arguments and sets useful defaults as well. This goal is meant
to execute a special &lt;i&gt;java project&lt;/i&gt; dedicated to UI testing via UIAutomator. It will build the jar of the
project, dex it and send it to dalvik cache of a rooted device or to an emulator. If you use a rooted device, refer
to &lt;a href=&quot;http://stackoverflow.com/a/13805869/693752&quot;&gt;this thread on stack over flow&lt;/a&gt;. &lt;br&gt;
&lt;br&gt;
The tests are executed via ui automator. A surefire compatible test report can be generated and its location will be
logged during build. &lt;br&gt;
&lt;br&gt;
To use this goal, you will need to place the uiautomator.jar file (part of the Android SDK &gt;= 16) on a nexus
repository. &lt;br&gt;
&lt;br&gt;
A typical usage of this goal can be found at &lt;a
href=&quot;https://github.com/stephanenicolas/Quality-Tools-for-Android&quot;&gt;Quality tools for Android project&lt;/a&gt;.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.UIAutomatorMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>mavenIgnoreTestFailure</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.failure.ignore is commonly used with Maven to prevent failure of build when (some) tests fail. We
honor it too. Builds will still fail if tests can&apos;t complete or throw an exception.</description>
        </parameter>
        <parameter>
          <name>mavenSkipTests</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-DskipTests is commonly used with Maven to skip tests. We honor it too.</description>
        </parameter>
        <parameter>
          <name>mavenTestFailureIgnore</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.failure.ignore is commonly used with Maven to prevent failure of build when (some) tests fail. We
honor it too. Builds will still fail if tests can&apos;t complete or throw an exception.</description>
        </parameter>
        <parameter>
          <name>mavenTestSkip</name>
          <type>boolean</type>
          <required>false</required>
          <editable>false</editable>
          <description>-Dmaven.test.skip is commonly used with Maven to skip tests. We honor it.</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>uiautomator</name>
          <type>com.simpligility.maven.plugins.android.configuration.UIAutomator</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configuration for the ui automator goal. As soon as a lint goal is invoked the command will be executed
unless the skip parameter is set. A minimal configuration that will run lint and produce a XML report in
${project.build.directory}/lint/lint-results.xml is

&lt;pre&gt;
&amp;lt;uiautomator&amp;gt;
  &amp;lt;skip&amp;gt;false&amp;lt;/skip&amp;gt;
&amp;lt;/uiautomator&amp;gt;
&lt;/pre&gt;

Full configuration can use these parameters.

&lt;pre&gt;
&amp;lt;uiautomator&amp;gt;
  &amp;lt;skip&amp;gt;false&amp;lt;/skip&amp;gt;
  &amp;lt;testClassOrMethods&amp;gt;
    &amp;lt;testClassOrMethod&amp;gt;com.foo.SampleTest&amp;lt;/testClassOrMethod&amp;gt;
    &amp;lt;testClassOrMethod&amp;gt;com.bar.CalculatorTest#testCalculatorApp&amp;lt;/testClassOrMethod&amp;gt;
  &amp;lt;/testClassOrMethods&amp;gt;
  &amp;lt;createReport&amp;gt;true&amp;lt;/createReport&amp;gt;
  &amp;lt;takeScreenshotOnFailure&amp;gt;true&amp;lt;/takeScreenshotOnFailure&amp;gt;
  &amp;lt;screenshotsPathOnDevice&amp;gt;/sdcard/uiautomator-screenshots/&amp;lt;/screenshotsPathOnDevice&amp;gt;
  &amp;lt;propertiesKeyPrefix&amp;gt;UIA&amp;lt;/propertiesKeyPrefix&amp;gt;
&amp;lt;/uiautomator&amp;gt;
&lt;/pre&gt;


Alternatively to the plugin configuration values can also be configured as properties on the command line as
android.lint.* or in pom or settings file as properties like lint*.</description>
        </parameter>
        <parameter>
          <name>uiautomatorCreateReport</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Create a junit xml format compatible output file containing the test results for each device the instrumentation
tests run on. &lt;br&gt;
&lt;br&gt;
The files are stored in target/surefire-reports and named TEST-deviceid.xml. The deviceid for an emulator is
deviceSerialNumber_avdName_manufacturer_model. The serial number is commonly emulator-5554 for the first emulator
started with numbers increasing. avdName is as defined in the SDK tool. The manufacturer is typically &quot;unknown&quot;
and the model is typically &quot;sdk&quot;.&lt;br&gt;
The deviceid for an actual devices is deviceSerialNumber_manufacturer_model. &lt;br&gt;
&lt;br&gt;
The file contains system properties from the system running the Android Maven Plugin (JVM) and device properties
from the device/emulator the tests are running on. &lt;br&gt;
&lt;br&gt;
The file contains a single TestSuite for all tests and a TestCase for each test method. Errors and failures are
logged in the file and the system log with full stack traces and other details available.</description>
        </parameter>
        <parameter>
          <name>uiautomatorDebug</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to wait for debugger to connect before starting.</description>
        </parameter>
        <parameter>
          <name>uiautomatorDumpFilePath</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generate an XML file with a dump of the current UI hierarchy. If a filepath is not specified, by default, the
generated dump file is stored on the device in this location /storage/sdcard0/window_dump.xml.</description>
        </parameter>
        <parameter>
          <name>uiautomatorJarFile</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Jar file that will be run during ui uiautomator tests.</description>
        </parameter>
        <parameter>
          <name>uiautomatorNoHup</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to run the test to completion on the device even if its parent process is terminated (for
example, if the device is disconnected).</description>
        </parameter>
        <parameter>
          <name>uiautomatorPropertiesKeyPrefix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a prefix for custom user properties that will be sent 
through to UIAutomator with the &lt;code&gt;&quot;-e key value&quot;&lt;/code&gt; parameter.&lt;/p&gt;

&lt;p&gt;If any user property is needed in a test case, this is the way to send it through.
User credentials for example.&lt;/p&gt;

&lt;p&gt;If no prefix value is specified no user property will be sent.&lt;/p&gt;

&lt;p&gt;Usage example:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;propertiesKeyPrefix&amp;gt;UIA&amp;lt;/propertiesKeyPrefix&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;And run it with:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;gt; mvn &amp;lt;goal&amp;gt; &quot;-DUIAkey=value&quot;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;would become &lt;code&gt;&quot;-e key value&quot;&lt;/code&gt; as it would be runned from adb&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>uiautomatorReportSuffix</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Adds a suffix to the report name. For example if parameter reportSuffix is &quot;-mySpecialReport&quot;,
the name of the report will be TEST-deviceid-mySpecialReport.xml

Defaults to null. Hence, in the default case, the name of the report will be TEST-deviceid.xml.</description>
        </parameter>
        <parameter>
          <name>uiautomatorScreenshotsPathOnDevice</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Location of the screenshots on device. This value is only taken into account if takeScreenshotOnFailure = true.
If a filepath is not specified, by default, the screenshots will be located at /sdcard/uiautomator-screenshots/.</description>
        </parameter>
        <parameter>
          <name>uiautomatorSkip</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Enables or disables uiautomator test goal. If &lt;code&gt;true&lt;/code&gt; it will be skipped; if &lt;code&gt;false&lt;/code&gt;, it
will be run.</description>
        </parameter>
        <parameter>
          <name>uiautomatorTakeScreenshotOnFailure</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether or not to take screenshots when tests execution results in failure or error. Screenshots use the
utiliy screencap that is usually available within emulator/devices with SDK &gt;= 16.</description>
        </parameter>
        <parameter>
          <name>uiautomatorTestClassOrMethods</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>Test class or methods to execute during uiautomator tests. Each class or method must be fully qualified with the
package name, in one of these formats:
&lt;ul&gt;
&lt;li&gt;package_name.class_name
&lt;li&gt;package_name.class_name#method_name
&lt;/ul&gt;</description>
        </parameter>
        <parameter>
          <name>uiautomatorUseDump</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether to use a dump file or not.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <mavenIgnoreTestFailure implementation="boolean" default-value="false">${testFailureIgnore}</mavenIgnoreTestFailure>
        <mavenSkipTests implementation="boolean" default-value="false">${skipTests}</mavenSkipTests>
        <mavenTestFailureIgnore implementation="boolean" default-value="false">${maven.test.failure.ignore}</mavenTestFailureIgnore>
        <mavenTestSkip implementation="boolean" default-value="false">${maven.test.skip}</mavenTestSkip>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <uiautomatorCreateReport implementation="java.lang.Boolean">${android.uiautomator.createReport}</uiautomatorCreateReport>
        <uiautomatorDebug implementation="java.lang.Boolean">${android.uiautomator.debug}</uiautomatorDebug>
        <uiautomatorDumpFilePath implementation="java.lang.String">${android.uiautomator.dumpFilePath}</uiautomatorDumpFilePath>
        <uiautomatorJarFile implementation="java.lang.String">${android.uiautomator.jarFile}</uiautomatorJarFile>
        <uiautomatorNoHup implementation="java.lang.Boolean">${android.uiautomator.noHup}</uiautomatorNoHup>
        <uiautomatorPropertiesKeyPrefix implementation="java.lang.String">${android.uiautomator.propertiesKeyPrefix}</uiautomatorPropertiesKeyPrefix>
        <uiautomatorReportSuffix implementation="java.lang.String">${android.uiautomator.reportSuffix}</uiautomatorReportSuffix>
        <uiautomatorScreenshotsPathOnDevice implementation="java.lang.String">${android.uiautomator.screenshotsPathOnDevice}</uiautomatorScreenshotsPathOnDevice>
        <uiautomatorSkip implementation="java.lang.Boolean">${android.uiautomator.skip}</uiautomatorSkip>
        <uiautomatorTakeScreenshotOnFailure implementation="java.lang.Boolean">${android.uiautomator.takeScreenshotOnFailure}</uiautomatorTakeScreenshotOnFailure>
        <uiautomatorTestClassOrMethods implementation="java.lang.String[]">${android.uiautomator.testClassOrMethod}</uiautomatorTestClassOrMethods>
        <uiautomatorUseDump implementation="java.lang.Boolean">${android.uiautomator.useDump}</uiautomatorUseDump>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>undeploy</goal>
      <description>Undeploys the apk(s) of the current project(s) to all attached devices and emulators.
Automatically skips other projects in a multi-module build that do not use packaging
apk without terminating.&lt;br&gt;
Deploymnet is automatically performed when running &lt;code&gt;mvn integration-test&lt;/code&gt;
(or &lt;code&gt;mvn install&lt;/code&gt;) on a project with instrumentation tests.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.UndeployMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>undeploy-apk</goal>
      <description>Undeploys a specified Android application apk from attached devices and emulators. 
By default it will undeploy from all, but a subset or single one can be configured 
with the device and devices parameters. You can supply the package of the 
application and/or an apk file. This goal can be used in non-android projects and as 
standalone execution on the command line.&lt;br&gt;</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>false</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.UndeployApkMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>deployapk</name>
          <type>com.simpligility.maven.plugins.android.configuration.DeployApk</type>
          <required>false</required>
          <editable>true</editable>
          <description>Configuration for apk file undeployment within a pom file. See {@link #deployapkFilename}. 

&lt;pre&gt;
&amp;lt;deployapk&amp;gt;
   &amp;lt;filename&amp;gt;yourapk.apk&amp;lt;/filename&amp;gt;
   &amp;lt;packagename&amp;gt;com.yourcompany.app&amp;lt;/packagename&amp;gt;
&amp;lt;/deployapk&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>deployapkFilename</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>deployapkPackagename</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <deployapkFilename implementation="java.io.File">${android.deployapk.filename}</deployapkFilename>
        <deployapkPackagename implementation="java.lang.String">${android.deployapk.packagename}</deployapkPackagename>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>unpack</goal>
      <description>Unpack libraries code and dependencies into target.

This can be useful for using the proguard maven plugin to provide the input jars. Although it is encouraged to use
the proguard mojo of the android maven plugin.</description>
      <requiresDependencyResolution>compile</requiresDependencyResolution>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.UnpackMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>lazyLibraryUnpack</name>
          <type>boolean</type>
          <deprecated>use ${android.unpack.lazy}</deprecated>
          <required>false</required>
          <editable>true</editable>
          <description>If true, the library will be unpacked only when outputDirectory doesn&apos;t
exist, i.e, a clean build for most cases.</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>pluginMetaInf</name>
          <alias>metaInf</alias>
          <type>com.simpligility.maven.plugins.android.configuration.MetaInf</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Unpack</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>unpackLazy</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <lazyLibraryUnpack implementation="boolean">${android.lazyLibraryUnpack}</lazyLibraryUnpack>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackLazy implementation="java.lang.Boolean">${android.unpack.lazy}</unpackLazy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
    <mojo>
      <goal>zipalign</goal>
      <description>ZipalignMojo can run the zipalign command against the apk. Implements parsing parameters from pom or command line
arguments and sets useful defaults as well.</description>
      <requiresDirectInvocation>false</requiresDirectInvocation>
      <requiresProject>true</requiresProject>
      <requiresReports>false</requiresReports>
      <aggregator>false</aggregator>
      <requiresOnline>false</requiresOnline>
      <inheritedByDefault>true</inheritedByDefault>
      <implementation>com.simpligility.maven.plugins.android.standalonemojos.ZipalignMojo</implementation>
      <language>java</language>
      <instantiationStrategy>per-lookup</instantiationStrategy>
      <executionStrategy>once-per-session</executionStrategy>
      <threadSafe>false</threadSafe>
      <parameters>
        <parameter>
          <name>aaptExtraArgs</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>A list of extra arguments that must be passed to aapt.</description>
        </parameter>
        <parameter>
          <name>aaptVerbose</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the aapt execution in Maven debug mode. Defaults to &quot;false&quot;</description>
        </parameter>
        <parameter>
          <name>adbConnectionTimeout</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>The timeout value for an adb connection in milliseconds.</description>
        </parameter>
        <parameter>
          <name>androidManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.</description>
        </parameter>
        <parameter>
          <name>assetsDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android assets directory.</description>
        </parameter>
        <parameter>
          <name>attachJar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach the normal .jar file to the build, so it can be depended on by for example integration-tests
which may then access {@code R.java} from this project.&lt;/p&gt;
&lt;p&gt;Only disable it if you know you won&apos;t need it for any integration-tests. Otherwise, leave it enabled.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>attachSources</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to attach sources to the build, which can be depended on by other {@code apk} projects, for including
them in their builds.&lt;/p&gt;
&lt;p&gt;Enabling this setting is only required if this project&apos;s source code and/or res(ources) will be included in
other projects, using the Maven &amp;lt;dependency&amp;gt; tag.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>combinedAssets</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The combined assets directory. This will contain both the assets found in &quot;assets&quot; as well as any assets
contained in a apksources, apklib or aar dependencies.</description>
        </parameter>
        <parameter>
          <name>configurations</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>A selection of configurations to be included in the APK as a comma separated list. This will limit the
configurations for a certain type. For example, specifying &lt;code&gt;hdpi&lt;/code&gt; will exclude all resource folders
with the &lt;code&gt;mdpi&lt;/code&gt; or &lt;code&gt;ldpi&lt;/code&gt; modifiers, but won&apos;t affect language or orientation modifiers.
For more information about this option, look in the aapt command line help.</description>
        </parameter>
        <parameter>
          <name>customPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Generates R.java into a different package.</description>
        </parameter>
        <parameter>
          <name>destinationManifestFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Path to which to save the result of updating/merging/processing the source &lt;code&gt;AndroidManifest.xml&lt;/code&gt;
file ({@link androidManifestFile}).</description>
        </parameter>
        <parameter>
          <name>device</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>Specifies which the serial number of the device to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.</description>
        </parameter>
        <parameter>
          <name>deviceThreads</name>
          <type>int</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies the number of threads to use for deploying and testing on attached devices.

&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.deviceThreads=2&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>devices</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Specifies a list of serial numbers of each device you want to connect to. Using the special values &quot;usb&quot; or
&quot;emulator&quot; is also valid. &quot;usb&quot; will connect to all actual devices connected (via usb). &quot;emulator&quot; will
connect to all emulators connected. Multiple devices will be iterated over in terms of goals to run. All
device interaction goals support this so you can e.. deploy the apk to all attached emulators and devices.
Goals supporting this are devices, deploy, undeploy, redeploy, pull, push and instrument.&lt;/p&gt;
&lt;pre&gt;
&amp;lt;devices&amp;gt;
    &amp;lt;device&amp;gt;usb&amp;lt;/device&amp;gt;
    &amp;lt;device&amp;gt;emulator-5554&amp;lt;/device&amp;gt;
&amp;lt;/devices&amp;gt;
&lt;/pre&gt;
&lt;p&gt;This parameter can also be configured from command-line with
parameter &lt;code&gt;-Dandroid.devices=usb,emulator&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>disableConflictingDependenciesWarning</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether the plugin should show a warning if conflicting dependencies with the Android provided ones exist.</description>
        </parameter>
        <parameter>
          <name>envAndroidHome</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up environment variable &lt;code&gt;ANDROID_HOME&lt;/code&gt; in case
&lt;code&gt;android.sdk.path&lt;/code&gt; is not configured.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>extractedDependenciesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaResources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>extractedDependenciesJavaSources</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>finalName</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The final name of the artifact.</description>
        </parameter>
        <parameter>
          <name>genDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Override default generated folder containing R.java</description>
        </parameter>
        <parameter>
          <name>generateApk</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Decides whether the Apk should be generated or not. If set to false, dx and apkBuilder will not run. This is
probably most useful for a project used to generate apk sources to be inherited into another application
project.</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromAar</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an aar as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>includeLibsJarsFromApklib</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Include jars stored in the libs folder of an apklib as dependencies.
Do not delete or change name as it is used in the LifeCycleParticipant.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ips</name>
          <type>java.lang.String[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;External IP addresses. The connect goal of the android maven plugin  will execute an adb connect on
each IP address. If you have external dervice, you should call this connect goal before any other goal :
mvn clean android:connect install.&lt;/p&gt;
&lt;p&gt;The Maven plugin will automatically add all these IP addresses into the the devices parameter.
If you want to disconnect the IP addresses after the build, you can call the disconnect goal :
mvn clean android:connect install android:disconnect&lt;/p&gt;

&lt;pre&gt;
&amp;lt;ips&amp;gt;
    &amp;lt;ip&amp;gt;127.0.0.1:5556&amp;lt;/ip&amp;gt;
&amp;lt;/ips&amp;gt;
&lt;/pre&gt;</description>
        </parameter>
        <parameter>
          <name>jack</name>
          <type>com.simpligility.maven.plugins.android.configuration.Jack</type>
          <required>false</required>
          <editable>true</editable>
          <description>configure the Jack compiler</description>
        </parameter>
        <parameter>
          <name>nativeLibrariesDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Root folder containing native libraries to include in the application package.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Ndk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android NDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-ndk-r4&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_NDK_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;ndk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_NDK_HOME}&amp;lt;/path&amp;gt;
&amp;lt;/ndk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hardcoded absolute path. The parameters can also be configured from command-line with parameter
&lt;code&gt;-Dandroid.ndk.path&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>ndkOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>Folder in which the ndk libraries are collected ready for packaging.</description>
        </parameter>
        <parameter>
          <name>ndkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.ndk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;ndk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Ndk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>proguardFile</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Automatically create a ProGuard configuration file that will guard Activity classes and the like that are
defined in the AndroidManifest.xml. This files is then automatically used in the proguard mojo execution, 
if enabled.</description>
        </parameter>
        <parameter>
          <name>projectOutputDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The output directory. Ie target/classes.</description>
        </parameter>
        <parameter>
          <name>release</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Whether to create a release build (default is false / debug build). This affect BuildConfig generation 
and apk generation at this stage, but should probably affect other aspects of the build.</description>
        </parameter>
        <parameter>
          <name>renameManifestPackage</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;A possibly new package name for the application. This value will be passed on to the aapt
parameter --rename-manifest-package. Look to aapt for more help on this. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>resourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The Android resources (src/main/res) directory. Note that this is different from the 
Maven/Java resources directory (src/main/resources) and should not be set to be the same
since different processing is carried out on these folder by different plugins and tools.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectories</name>
          <type>java.io.File[]</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directories. If this is specified,
the {@link #resourceOverlayDirectory} parameter will be ignored.</description>
        </parameter>
        <parameter>
          <name>resourceOverlayDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>The android resources overlay directory. This will be overridden
by resourceOverlayDirectories if present.</description>
        </parameter>
        <parameter>
          <name>resources</name>
          <type>java.util.List</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project resources. By default a list containing src/main/resources.</description>
        </parameter>
        <parameter>
          <name>sdk</name>
          <type>com.simpligility.maven.plugins.android.configuration.Sdk</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;The Android SDK to use.&lt;/p&gt;
&lt;p&gt;Looks like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;/opt/android-sdk-linux&amp;lt;/path&amp;gt;
    &amp;lt;platform&amp;gt;2.1&amp;lt;/platform&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;platform&amp;gt;&lt;/code&gt; parameter is optional, and corresponds to the
&lt;code&gt;platforms/android-*&lt;/code&gt; directories in the Android SDK directory. Default is the latest available
version, so you only need to set it if you for example want to use platform 1.5 but also have e.g. 2.2 installed.
Has no effect when used on an Android SDK 1.1. The parameter can also be coded as the API level. Therefore valid
values are 1.1, 1.5, 1.6, 2.0, 2.01, 2.1, 2.2 and so as well as 3, 4, 5, 6, 7, 8... 19. If a platform/api level 
is not installed on the machine an error message will be produced. &lt;/p&gt;
&lt;p&gt;The &lt;code&gt;&amp;lt;path&amp;gt;&lt;/code&gt; parameter is optional. The default is the setting of the ANDROID_HOME
environment variable. The parameter can be used to override this setting with a different environment variable
like this:&lt;/p&gt;
&lt;pre&gt;
&amp;lt;sdk&amp;gt;
    &amp;lt;path&amp;gt;${env.ANDROID_SDK}&amp;lt;/path&amp;gt;
&amp;lt;/sdk&amp;gt;
&lt;/pre&gt;
&lt;p&gt;or just with a hard-coded absolute path. The parameters can also be configured from command-line with
parameters &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; and &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt;.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPath</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.path&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#path}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sdkPlatform</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>&lt;p&gt;Parameter designed to pick up &lt;code&gt;-Dandroid.sdk.platform&lt;/code&gt; in case there is no pom with an
&lt;code&gt;&amp;lt;sdk&amp;gt;&lt;/code&gt; configuration tag.&lt;/p&gt;
&lt;p&gt;Corresponds to {@link com.simpligility.maven.plugins.android.configuration.Sdk#platform}.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>sourceDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The java sources directory.</description>
        </parameter>
        <parameter>
          <name>sourceEncoding</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project source encoding. It will use the platform default encoding if the property is not set.</description>
        </parameter>
        <parameter>
          <name>targetDirectory</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>false</editable>
          <description>The project build directory. Ie target.</description>
        </parameter>
        <parameter>
          <name>undeployBeforeDeploy</name>
          <type>boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Whether to undeploy an apk from the device before deploying it.&lt;/p&gt;

&lt;p&gt;Only has effect when running &lt;code&gt;mvn android:deploy&lt;/code&gt; in an Android application project manually, or
when running &lt;code&gt;mvn integration-test&lt;/code&gt; (or &lt;code&gt;mvn install&lt;/code&gt;) in a project with instrumentation
tests.
&lt;/p&gt;

&lt;p&gt;It is useful to keep this set to &lt;code&gt;true&lt;/code&gt; at all times, because if an apk with the same package was
previously signed with a different keystore, and deployed to the device, deployment will fail because your
keystore is different.&lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>unpackedLibsFolder</name>
          <type>java.io.File</type>
          <required>false</required>
          <editable>true</editable>
          <description>Folder in which AAR library dependencies will be unpacked.</description>
        </parameter>
        <parameter>
          <name>zipalign</name>
          <type>com.simpligility.maven.plugins.android.configuration.Zipalign</type>
          <required>false</required>
          <editable>true</editable>
          <description>The configuration for the zipalign goal. As soon as a zipalign goal is invoked the command will be executed
unless the skip parameter is set. By default the input file is the apk produced by the build in target. The
outputApk will use the postfix -aligned.apk. The following shows a default full configuration of the zipalign
goal as an example for changes as plugin configuration.
&lt;pre&gt;
&amp;lt;zipalign&amp;gt;
    &amp;lt;skip&amp;gt;false&amp;lt;/skip&amp;gt;
    &amp;lt;verbose&amp;gt;true&amp;lt;/verbose&amp;gt;
    &amp;lt;inputApk&amp;gt;${project.build.directory}/${project.finalName}.apk&amp;lt;/inputApk&amp;gt;
    &amp;lt;outputApk&amp;gt;${project.build.directory}/${project.finalName}-aligned.apk&amp;lt;/outputApk&amp;gt;
&amp;lt;/zipalign&amp;gt;
&lt;/pre&gt;

Values can also be configured as properties on the command line as android.zipalign.*
or in pom or settings file as properties like zipalign.*.</description>
        </parameter>
        <parameter>
          <name>zipalignClassifier</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>&lt;p&gt;Classifier to add to the artifact generated. &lt;/p&gt;</description>
        </parameter>
        <parameter>
          <name>zipalignInputApk</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The apk file to be zipaligned. Per default the file is taken from build directory (target normally) using the
build final name as file name and apk as extension.</description>
        </parameter>
        <parameter>
          <name>zipalignOutputApk</name>
          <type>java.lang.String</type>
          <required>false</required>
          <editable>true</editable>
          <description>The apk file produced by the zipalign goal. Per default the file is placed into the build directory (target
normally) using the build final name appended with &quot;-aligned&quot; as file name and apk as extension.</description>
        </parameter>
        <parameter>
          <name>zipalignSkip</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Skip the zipalign goal execution. Defaults to &quot;true&quot;.</description>
        </parameter>
        <parameter>
          <name>zipalignVerbose</name>
          <type>java.lang.Boolean</type>
          <required>false</required>
          <editable>true</editable>
          <description>Activate verbose output for the zipalign goal execution. Defaults to &quot;false&quot;.</description>
        </parameter>
        <parameter>
          <name>execution</name>
          <type>org.apache.maven.plugin.MojoExecution</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>project</name>
          <type>org.apache.maven.project.MavenProject</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
        <parameter>
          <name>session</name>
          <type>org.apache.maven.execution.MavenSession</type>
          <required>true</required>
          <editable>false</editable>
          <description></description>
        </parameter>
      </parameters>
      <configuration>
        <aaptExtraArgs implementation="java.lang.String[]">${android.aaptExtraArgs}</aaptExtraArgs>
        <aaptVerbose implementation="boolean">${android.aaptVerbose}</aaptVerbose>
        <adbConnectionTimeout implementation="int" default-value="5000">${android.adb.connectionTimeout}</adbConnectionTimeout>
        <androidManifestFile implementation="java.io.File" default-value="${project.basedir}/src/main/AndroidManifest.xml">${android.manifestFile}</androidManifestFile>
        <assetsDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/assets"/>
        <attachJar implementation="boolean" default-value="true">${android.attachJar}</attachJar>
        <attachSources implementation="boolean" default-value="false">${android.attachSources}</attachSources>
        <combinedAssets implementation="java.io.File" default-value="${project.build.directory}/generated-sources/combined-assets"/>
        <configurations implementation="java.lang.String">${android.configurations}</configurations>
        <customPackage implementation="java.lang.String">${android.customPackage}</customPackage>
        <destinationManifestFile implementation="java.io.File" default-value="${project.build.directory}/AndroidManifest.xml">${destination.manifestFile}</destinationManifestFile>
        <device implementation="java.lang.String">${android.device}</device>
        <deviceThreads implementation="int">${android.deviceThreads}</deviceThreads>
        <devices implementation="java.lang.String[]">${android.devices}</devices>
        <disableConflictingDependenciesWarning implementation="java.io.File" default-value="false"/>
        <envAndroidHome implementation="java.lang.String" default-value="${env.ANDROID_HOME}"/>
        <extractedDependenciesDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies"/>
        <extractedDependenciesJavaResources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/resources"/>
        <extractedDependenciesJavaSources implementation="java.io.File" default-value="${project.build.directory}/generated-sources/extracted-dependencies/src/main/java"/>
        <finalName implementation="java.lang.String" default-value="${project.build.finalName}"/>
        <genDirectory implementation="java.io.File" default-value="${project.build.directory}/generated-sources/r">${android.genDirectory}</genDirectory>
        <generateApk implementation="boolean" default-value="true">${android.generateApk}</generateApk>
        <includeLibsJarsFromAar implementation="boolean" default-value="true"/>
        <includeLibsJarsFromApklib implementation="boolean" default-value="false"/>
        <ips implementation="java.lang.String[]">${android.ips}</ips>
        <nativeLibrariesDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/libs">${android.nativeLibrariesDirectory}</nativeLibrariesDirectory>
        <ndkOutputDirectory implementation="java.io.File" default-value="${project.build.directory}/ndk-libs"/>
        <ndkPath implementation="java.io.File">${android.ndk.path}</ndkPath>
        <proguardFile implementation="java.io.File">${android.proguardFile}</proguardFile>
        <projectOutputDirectory implementation="java.io.File" default-value="${project.build.outputDirectory}"/>
        <release implementation="boolean" default-value="false">${android.release}</release>
        <renameManifestPackage implementation="java.lang.String">${android.renameManifestPackage}</renameManifestPackage>
        <resourceDirectory implementation="java.io.File" default-value="${project.basedir}/src/main/res"/>
        <resourceOverlayDirectory implementation="java.io.File" default-value="${project.basedir}/res-overlay"/>
        <resources implementation="java.util.List" default-value="${project.build.resources}"/>
        <sdkPath implementation="java.io.File">${android.sdk.path}</sdkPath>
        <sdkPlatform implementation="java.lang.String">${android.sdk.platform}</sdkPlatform>
        <sourceDirectory implementation="java.io.File" default-value="${project.build.sourceDirectory}"/>
        <sourceEncoding implementation="java.lang.String" default-value="${project.build.sourceEncoding}"/>
        <targetDirectory implementation="java.io.File" default-value="${project.build.directory}"/>
        <undeployBeforeDeploy implementation="boolean" default-value="false">${android.undeployBeforeDeploy}</undeployBeforeDeploy>
        <unpackedLibsFolder implementation="java.io.File" default-value="${project.build.directory}/unpacked-libs">${unpackedLibsFolder}</unpackedLibsFolder>
        <zipalignClassifier implementation="java.lang.String">${android.zipalign.classifier}</zipalignClassifier>
        <zipalignInputApk implementation="java.lang.String">${android.zipalign.inputApk}</zipalignInputApk>
        <zipalignOutputApk implementation="java.lang.String">${android.zipalign.outputApk}</zipalignOutputApk>
        <zipalignSkip implementation="java.lang.Boolean">${android.zipalign.skip}</zipalignSkip>
        <zipalignVerbose implementation="java.lang.Boolean">${android.zipalign.verbose}</zipalignVerbose>
        <execution implementation="org.apache.maven.plugin.MojoExecution" default-value="${mojoExecution}"/>
        <project implementation="org.apache.maven.project.MavenProject" default-value="${project}"/>
        <session implementation="org.apache.maven.execution.MavenSession" default-value="${session}"/>
      </configuration>
      <requirements>
        <requirement>
          <role>org.apache.maven.artifact.handler.ArtifactHandler</role>
          <field-name>artifactHandler</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>
          <field-name>artifactResolver</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.shared.dependency.graph.DependencyGraphBuilder</role>
          <role-hint>default</role-hint>
          <field-name>dependencyGraphBuilder</field-name>
        </requirement>
        <requirement>
          <role>org.apache.maven.project.MavenProjectHelper</role>
          <field-name>projectHelper</field-name>
        </requirement>
      </requirements>
    </mojo>
  </mojos>
  <dependencies>
    <dependency>
      <groupId>com.android.tools</groupId>
      <artifactId>annotations</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools</groupId>
      <artifactId>common</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava</artifactId>
      <type>jar</type>
      <version>18.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools</groupId>
      <artifactId>dvlib</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools</groupId>
      <artifactId>sdk-common</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.build</groupId>
      <artifactId>builder-test-api</artifactId>
      <type>jar</type>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcpkix-jdk15on</artifactId>
      <type>jar</type>
      <version>1.48</version>
    </dependency>
    <dependency>
      <groupId>org.bouncycastle</groupId>
      <artifactId>bcprov-jdk15on</artifactId>
      <type>jar</type>
      <version>1.48</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools</groupId>
      <artifactId>sdklib</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.code.gson</groupId>
      <artifactId>gson</artifactId>
      <type>jar</type>
      <version>2.2.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-compress</artifactId>
      <type>jar</type>
      <version>1.8.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpclient</artifactId>
      <type>jar</type>
      <version>4.1.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpcore</artifactId>
      <type>jar</type>
      <version>4.1</version>
    </dependency>
    <dependency>
      <groupId>commons-logging</groupId>
      <artifactId>commons-logging</artifactId>
      <type>jar</type>
      <version>1.1.1</version>
    </dependency>
    <dependency>
      <groupId>commons-codec</groupId>
      <artifactId>commons-codec</artifactId>
      <type>jar</type>
      <version>1.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.httpcomponents</groupId>
      <artifactId>httpmime</artifactId>
      <type>jar</type>
      <version>4.1</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.build</groupId>
      <artifactId>builder</artifactId>
      <type>jar</type>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.jack</groupId>
      <artifactId>jack-api</artifactId>
      <type>jar</type>
      <version>0.13.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.jill</groupId>
      <artifactId>jill-api</artifactId>
      <type>jar</type>
      <version>0.10.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.analytics-library</groupId>
      <artifactId>protos</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
      <type>jar</type>
      <version>3.0.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.analytics-library</groupId>
      <artifactId>shared</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.analytics-library</groupId>
      <artifactId>tracker</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.squareup</groupId>
      <artifactId>javawriter</artifactId>
      <type>jar</type>
      <version>2.5.0</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-tree</artifactId>
      <type>jar</type>
      <version>5.0.4</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.build</groupId>
      <artifactId>builder-model</artifactId>
      <type>jar</type>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools</groupId>
      <artifactId>repository</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.jimfs</groupId>
      <artifactId>jimfs</artifactId>
      <type>jar</type>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.build</groupId>
      <artifactId>manifest-merger</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>net.sf.kxml</groupId>
      <artifactId>kxml2</artifactId>
      <type>jar</type>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.ddms</groupId>
      <artifactId>ddmlib</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.layoutlib</groupId>
      <artifactId>layoutlib-api</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.intellij</groupId>
      <artifactId>annotations</artifactId>
      <type>jar</type>
      <version>12.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.lint</groupId>
      <artifactId>lint</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.jdt.core.compiler</groupId>
      <artifactId>ecj</artifactId>
      <type>jar</type>
      <version>4.6.1</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.lint</groupId>
      <artifactId>lint-api</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.external.com-intellij</groupId>
      <artifactId>uast</artifactId>
      <type>jar</type>
      <version>162.2228.14</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.external.lombok</groupId>
      <artifactId>lombok-ast</artifactId>
      <type>jar</type>
      <version>0.2.3</version>
    </dependency>
    <dependency>
      <groupId>com.android.tools.lint</groupId>
      <artifactId>lint-checks</artifactId>
      <type>jar</type>
      <version>25.3.0</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm-analysis</artifactId>
      <type>jar</type>
      <version>5.0.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-compat</artifactId>
      <type>jar</type>
      <version>3.0.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model</artifactId>
      <type>jar</type>
      <version>3.0.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-model-builder</artifactId>
      <type>jar</type>
      <version>3.0.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-settings</artifactId>
      <type>jar</type>
      <version>3.0.4</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-interpolation</artifactId>
      <type>jar</type>
      <version>1.14</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-plexus</artifactId>
      <type>jar</type>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-inject-bean</artifactId>
      <type>jar</type>
      <version>2.3.0</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-guice</artifactId>
      <type>jar</type>
      <version>3.1.0</version>
    </dependency>
    <dependency>
      <groupId>org.sonatype.sisu</groupId>
      <artifactId>sisu-guava</artifactId>
      <type>jar</type>
      <version>0.9.9</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-component-annotations</artifactId>
      <type>jar</type>
      <version>1.5.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.wagon</groupId>
      <artifactId>wagon-provider-api</artifactId>
      <type>jar</type>
      <version>2.2</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-plugin-api</artifactId>
      <type>jar</type>
      <version>3.0.4</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-classworlds</artifactId>
      <type>jar</type>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-archiver</artifactId>
      <type>jar</type>
      <version>2.5</version>
    </dependency>
    <dependency>
      <groupId>emma</groupId>
      <artifactId>emma</artifactId>
      <type>jar</type>
      <version>2.0.5312</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-archiver</artifactId>
      <type>jar</type>
      <version>3.0.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-io</artifactId>
      <type>jar</type>
      <version>2.6</version>
    </dependency>
    <dependency>
      <groupId>org.iq80.snappy</groupId>
      <artifactId>snappy</artifactId>
      <type>jar</type>
      <version>0.3</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-utils</artifactId>
      <type>jar</type>
      <version>3.1.0</version>
    </dependency>
    <dependency>
      <groupId>commons-jxpath</groupId>
      <artifactId>commons-jxpath</artifactId>
      <type>jar</type>
      <version>1.3</version>
    </dependency>
    <dependency>
      <groupId>commons-io</groupId>
      <artifactId>commons-io</artifactId>
      <type>jar</type>
      <version>2.4</version>
    </dependency>
    <dependency>
      <groupId>org.ow2.asm</groupId>
      <artifactId>asm</artifactId>
      <type>jar</type>
      <version>5.0.4</version>
    </dependency>
    <dependency>
      <groupId>org.apache.commons</groupId>
      <artifactId>commons-lang3</artifactId>
      <type>jar</type>
      <version>3.4</version>
    </dependency>
    <dependency>
      <groupId>com.github.rtyley</groupId>
      <artifactId>android-screenshot-paparazzo</artifactId>
      <type>jar</type>
      <version>1.9</version>
    </dependency>
    <dependency>
      <groupId>com.madgag</groupId>
      <artifactId>animated-gif-lib</artifactId>
      <type>jar</type>
      <version>1.0</version>
    </dependency>
    <dependency>
      <groupId>com.github.rtyley</groupId>
      <artifactId>android-screenshot-celebrity</artifactId>
      <type>jar</type>
      <version>1.9</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-dependency-tree</artifactId>
      <type>jar</type>
      <version>2.2</version>
    </dependency>
    <dependency>
      <groupId>org.eclipse.aether</groupId>
      <artifactId>aether-util</artifactId>
      <type>jar</type>
      <version>0.9.0.M2</version>
    </dependency>
    <dependency>
      <groupId>com.google.apis</groupId>
      <artifactId>google-api-services-androidpublisher</artifactId>
      <type>jar</type>
      <version>v2-rev13-1.19.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.api-client</groupId>
      <artifactId>google-api-client</artifactId>
      <type>jar</type>
      <version>1.19.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.oauth-client</groupId>
      <artifactId>google-oauth-client</artifactId>
      <type>jar</type>
      <version>1.19.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.http-client</groupId>
      <artifactId>google-http-client</artifactId>
      <type>jar</type>
      <version>1.19.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.http-client</groupId>
      <artifactId>google-http-client-jackson2</artifactId>
      <type>jar</type>
      <version>1.19.0</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-core</artifactId>
      <type>jar</type>
      <version>2.1.3</version>
    </dependency>
    <dependency>
      <groupId>com.google.guava</groupId>
      <artifactId>guava-jdk5</artifactId>
      <type>jar</type>
      <version>13.0</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-shade-plugin</artifactId>
      <type>jar</type>
      <version>2.3</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-container-default</artifactId>
      <type>jar</type>
      <version>1.0-alpha-9-stable-1</version>
    </dependency>
    <dependency>
      <groupId>classworlds</groupId>
      <artifactId>classworlds</artifactId>
      <type>jar</type>
      <version>1.1-alpha-2</version>
    </dependency>
    <dependency>
      <groupId>jaxen</groupId>
      <artifactId>jaxen</artifactId>
      <type>jar</type>
      <version>1.1.6</version>
    </dependency>
    <dependency>
      <groupId>org.jdom</groupId>
      <artifactId>jdom2</artifactId>
      <type>jar</type>
      <version>2.0.6</version>
    </dependency>
    <dependency>
      <groupId>net.sf.proguard</groupId>
      <artifactId>proguard-base</artifactId>
      <type>jar</type>
      <version>5.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-compiler-api</artifactId>
      <type>jar</type>
      <version>2.5</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.plugins</groupId>
      <artifactId>maven-compiler-plugin</artifactId>
      <type>jar</type>
      <version>3.5.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven</groupId>
      <artifactId>maven-toolchain</artifactId>
      <type>jar</type>
      <version>2.2.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-shared-utils</artifactId>
      <type>jar</type>
      <version>3.0.0</version>
    </dependency>
    <dependency>
      <groupId>com.google.code.findbugs</groupId>
      <artifactId>jsr305</artifactId>
      <type>jar</type>
      <version>2.0.1</version>
    </dependency>
    <dependency>
      <groupId>org.apache.maven.shared</groupId>
      <artifactId>maven-shared-incremental</artifactId>
      <type>jar</type>
      <version>1.1</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-compiler-manager</artifactId>
      <type>jar</type>
      <version>2.7</version>
    </dependency>
    <dependency>
      <groupId>org.codehaus.plexus</groupId>
      <artifactId>plexus-compiler-javac</artifactId>
      <type>jar</type>
      <version>2.7</version>
    </dependency>
  </dependencies>
</plugin>